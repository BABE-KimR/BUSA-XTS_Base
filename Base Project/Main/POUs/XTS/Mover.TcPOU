<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="Mover" Id="{461a92b9-026e-4cbb-aa50-b18297f25ecc}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'reflection'}
//{attribute 'hide_all_locals'}
FUNCTION_BLOCK Mover IMPLEMENTS iMover;

VAR_INPUT
	
	MotionParameters		: MotionParameters_typ;		// Motion parameters used by internal motion function blocks

END_VAR
VAR_OUTPUT
	
	Ready			: BOOL;			// Mover is enabled and ready to accept motion commands
	Busy			: BOOL;			// Mover is processing a command or changing state
	
	Error			: BOOL;			// error is currently active
	ErrorID			: UDINT;		// errorID of the active error
	ErrorOrigin		: STRING;		// error source, in case of errored internal function block
	
	InGroup			: BOOL;			// Mover is currently grouped for CA
	IdentInGroup	: UDINT;		// IDX within group, for knowing which movers are adjacent
	
	AxisReference	: AXIS_REF;		// Motion link variable. Left as output so the link can be made directly, and accessed by external code
	
END_VAR
VAR
	
	{attribute 'instance=path'}
	{attribute 'no-init'}
	InstancePath		: STRING;	// instance naming, for diagnostics purposes
	
	internalEnable		: BOOL;		// moves the axis from Disabled to Standstill, adds Axis to CA group, and triggers M1 Detection if configured
	internalDisable		: BOOL;		// moves the axis from Standstill to Disabled, removes Axis from CA Group
	
	internalCurrentMoveType			: MoverCommandType_enum;	// Most recent move command type
	
	internalCurrentDestPosition		: LREAL;	// Track position of the current motion destination;
	internalCurrentDestObjective	: STRING;	// Instance path of the current destination objective
	internalCurrentDestStation		: REFERENCE TO Station;		// Reference to a destination station, if that is the current movetype

	internalState			: MoverState_enum;		// Internal state variable
	
	// Configurable Payload description	
	internalPayload			: USINT;	// E.g. 0: No Product, 1: Product Loaded, 2: Product Reject. Can be modified for application
	
	// Internal function blocks	
	fbPower					: MC_Power;
	fbReset					: MC_Reset;

	fbMoveAbsCA				: ARRAY[0..1] OF MC_MoveAbsoluteCA;
	fbAddToGroup			: MC_AddAxisToGroup;
	fbRemoveFromGroup		: MC_RemoveAxisFromGroup;
	
	fbGroupStatus			: MC_GroupReadStatus;
	fbGroupEnable			: MC_GroupEnable;
	fbGroupStop				: MC_GroupStop;
	
	fbReadStatus			: MC_ReadStatus;
	fbMoveRelCA				: ARRAY[0..1] OF MC_MoveRelativeCA;
	
	fbReadM1DetectMode		: ADSREAD;
	fbReadM1DetectValid		: ADSREAD;
	fbReadM1DetectActive	: ADSREAD;
	fbWriteM1Detect			: ADSWRITE;
	IdDetectionMode			: DINT;			// 0: Standard 1: Mover1
	IsIdDetectionValid		: BOOL;			// M1 Detection has completed
	IsIdDetectionActive		: BOOL;			// M1 Detection currently underway
	
	
END_VAR
VAR_IN_OUT
	
	GroupReference		: AXES_GROUP_REF;
	
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Methods" Id="{d146b766-1176-40b7-a641-ffa579406c77}" />
    <Folder Name="Properties" Id="{9b9301bf-13c1-4ce0-91ab-e61950dfd74a}" />
    <Property Name="CurrentMoveType" Id="{97c82f4e-fad3-4ecf-8f48-6f47f3a34a61}" FolderPath="Properties\">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY CurrentMoveType : MoverCommandType_enum]]></Declaration>
      <Get Name="Get" Id="{008a2288-6099-47d9-88ab-640a99950162}">
        <Declaration><![CDATA[VAR
	MoverCurrentMoveType: MoverCommandType_enum;
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[
CurrentMoveType		:= internalCurrentMoveType;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="CurrentObjective" Id="{b06cf2ff-b1dd-4afb-af24-76820a9809f8}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY CurrentObjective : String]]></Declaration>
      <Get Name="Get" Id="{39f22891-e1d0-4fbf-9032-2bbc45b18310}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[
CurrentObjective		:= internalCurrentDestObjective;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="CurrestDestinationPosition" Id="{6d470b15-bd31-4ad6-8559-906c2c8d720c}" FolderPath="Properties\">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY CurrestDestinationPosition : LREAL]]></Declaration>
      <Get Name="Get" Id="{bc93c9f7-92a5-426e-9c7f-5953d1b7c034}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[
CurrestDestinationPosition		:= internalCurrentDestPosition;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Cyclic" Id="{39769063-232f-402c-8c9b-ad47db196752}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD Cyclic : iMover
VAR_IN_OUT
	GroupReference		: AXES_GROUP_REF;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
CASE internalState OF
	MV_IDLE:	// ------------------------------------------------------- idle state
	
		Ready	:= FALSE;
		Busy	:= FALSE;

		fbMoveAbsCA[0].Execute	:= FALSE;
		fbMoveAbsCA[1].Execute	:= FALSE;
		fbMoveRelCA[0].Execute	:= FALSE;
		fbMoveRelCA[1].Execute	:= FALSE;
		
		IF internalEnable THEN
			internalEnable		:= FALSE;
			internalState		:= MV_RESET;
		END_IF
		
	MV_RESET: // ------------------------------------------------------- axis is resetting
	
		Ready	:= FALSE;
		Busy	:= TRUE;
		Error	:= FALSE;
		ErrorID	:= 0;
		
		fbReset.Execute			:= TRUE;
		
		IF fbReset.Done THEN
			internalState		:= MV_M1_READMODE;
		ELSIF fbReset.Error THEN
			ErrorID				:= fbReset.ErrorID;
			ErrorOrigin			:= CONCAT( InstancePath, '.fbReset' );
			internalState		:= MV_ERROR;		
		END_IF
		
	MV_M1_READMODE: // ------------------------------------------------------- begin checking for M1 detection mode setting
	
		Ready	:= FALSE;
		Busy	:= TRUE;
		Error	:= FALSE;
		ErrorID	:= 0;
		
		// todo: values may change. see issue #25 for update
		fbReadM1DetectMode.NETID		:= '';
		fbReadM1DetectMode.PORT			:= 351;
		fbReadM1DetectMode.IDXGRP		:= 16#01010010;
		fbReadM1DetectMode.IDXOFFS		:= 16#03080246;
		fbReadM1DetectMode.LEN			:= SIZEOF( IdDetectionMode );
		fbReadM1DetectMode.DESTADDR		:= ADR( IdDetectionMode );
		fbReadM1DetectMode.READ			:= TRUE;
		
		internalState	:= MV_M1_EVALMODE;
		
	MV_M1_EVALMODE: // ------------------------------------------------------- Determine detection mode setting
	
		Ready	:= FALSE;
		Busy	:= TRUE;
		Error	:= FALSE;
		ErrorID	:= 0;
	
		fbReadM1DetectMode.READ		:= FALSE;
		
		CASE IdDetectionMode OF
			0:	internalState		:= MV_ENABLING;			// Mover 1 functionality is not configured, skip ahead to enabling the mover
			1:	internalState		:= MV_M1_READSTATUS;	// Mover 1 functionality is configured, read detection status
		END_CASE
	
	MV_M1_READSTATUS: // ------------------------------------------------------- Determine current M1 Detection Status
	
		Ready	:= FALSE;
		Busy	:= TRUE;
		Error	:= FALSE;
		ErrorID	:= 0;
		
		fbWriteM1Detect.WRITE			:= FALSE;
		
		fbReadM1DetectValid.NETID		:= '';
		fbReadM1DetectValid.PORT		:= 351;
		fbReadM1DetectValid.IDXGRP		:= 16#01010010;
		fbReadM1DetectValid.IDXOFFS		:= 16#03080251;
		fbReadM1DetectValid.LEN			:= SIZEOF( IsIdDetectionValid );
		fbReadM1DetectValid.DESTADDR	:= ADR( IsIdDetectionValid );
		fbReadM1DetectValid.READ		:= TRUE;
		
		fbReadM1DetectActive.NETID		:= '';
		fbReadM1DetectActive.PORT		:= 351;
		fbReadM1DetectActive.IDXGRP		:= 16#01010010;
		fbReadM1DetectActive.IDXOFFS	:= 16#03080268;
		fbReadM1DetectActive.LEN		:= SIZEOF( IsIdDetectionActive );
		fbReadM1DetectActive.DESTADDR	:= ADR( IsIdDetectionActive );
		fbReadM1DetectActive.READ		:= TRUE;
		
		internalState	:= MV_M1_EVALSTATUS;
		
	MV_M1_EVALSTATUS:	// ------------------------------------------------------- Determine to activate M1 Detect or ignore
	
		Ready	:= FALSE;
		Busy	:= TRUE;
		Error	:= FALSE;
		ErrorID	:= 0;
	
		fbReadM1DetectValid.READ		:= FALSE;
		fbReadM1DetectActive.READ		:= FALSE;
		
		IF IsIdDetectionActive THEN
			internalState		:= MV_M1_READSTATUS;	// M1 Detection is underway, but we need to wait until it completes
		ELSIF IsIdDetectionValid THEN
			internalState		:= MV_ENABLING;			// M1 Detection complete, ready to enable this mover
		ELSE
			internalState		:= MV_M1_DETECT;		// M1 Detection hasn't been started yet. So start it!
		END_IF
 
	MV_M1_DETECT:	// ------------------------------------------------------- Begin M1 Detection
	
		Ready	:= FALSE;
		Busy	:= TRUE;
		Error	:= FALSE;
		ErrorID	:= 0;
		
		fbWriteM1Detect.NETID			:= '';
		fbWriteM1Detect.PORT			:= 351;
		fbWriteM1Detect.IDXGRP			:= 16#01010010;
		fbWriteM1Detect.IDXOFFS			:= 16#03080250;
		fbWriteM1Detect.WRITE			:= TRUE;
		
		internalState	:= MV_M1_READSTATUS;	// go back to Read M1 Detect status to confirm it has completed
			
	MV_ENABLING: // ------------------------------------------------------- axis is enabling
	
		Ready	:= FALSE;
		Busy	:= TRUE;
		Error	:= FALSE;
		ErrorID	:= 0;
		
		fbPower.Enable					:= TRUE;
		fbPower.Enable_Positive			:= TRUE;
		fbPower.Enable_Negative			:= TRUE;
		fbPower.BufferMode				:= MC_Aborting;
		fbPower.Override				:= 100;
		
		IF fbPower.Status THEN
			internalState				:= MV_ADDTOGROUP;
		ELSIF fbPower.Error THEN
			ErrorID						:= fbPower.ErrorID;
			ErrorOrigin					:= CONCAT( InstancePath, '.fbPower' );
			internalState				:= MV_ERROR;
		END_IF
		
	MV_ADDTOGROUP: // ------------------------------------------------------- axis is adding to a group
	
		Ready	:= FALSE;
		Busy	:= TRUE;
		Error	:= FALSE;
		ErrorID	:= 0;
		
		fbAddToGroup.Execute			:= TRUE;
		fbAddToGroup.IdentInGroup		:= UDINT_TO_IDENTINGROUP( AxisReference.NcToPlc.AxisId - 1 );
		
		IF fbAddToGroup.Done THEN
			InGroup						:= TRUE;
			IdentInGroup				:= AxisReference.NcToPlc.AxisId - 1;
			fbAddToGroup.Execute		:= FALSE;
			internalState				:= MV_READGROUPSTATUS;
		ELSIF fbAddToGroup.Error THEN
			ErrorID						:= fbAddToGroup.ErrorId;
			ErrorOrigin					:= CONCAT( InstancePath, '.fbAddToGroup' );
			internalState				:= MV_ERROR;
		END_IF
		
	MV_READGROUPSTATUS: // ------------------------------------------------------- check the status of the group
	
		Ready	:= FALSE;
		Busy	:= TRUE;
		Error	:= FALSE;
		ErrorID	:= 0;
		
		fbGroupStatus.Enable			:= TRUE;
		
		IF fbGroupStatus.Valid AND fbGroupStatus.GroupDisabled THEN
			internalState				:= MV_ENABLEGROUP;
		ELSIF fbGroupStatus.Valid AND fbGroupStatus.GroupDisabled = FALSE THEN
			internalState				:= MV_RUN;
		ELSIF fbGroupStatus.Error THEN
			ErrorID						:= fbGroupStatus.ErrorId;
			ErrorOrigin					:= CONCAT( InstancePath, '.fbGroupStatus' );
			internalState				:= MV_ERROR;
		END_IF
		
	MV_ENABLEGROUP: // ------------------------------------------------------- enable the group
	
		Ready	:= FALSE;
		Busy	:= TRUE;
		Error	:= FALSE;
		ErrorID	:= 0;
		
		fbGroupEnable.Execute			:= TRUE;
		
		IF fbGroupEnable.Done THEN
			fbGroupEnable.Execute		:= FALSE;
			internalState				:= MV_RUN;
		ELSIF fbGroupEnable.Error THEN
			ErrorID						:= fbGroupEnable.ErrorId;
			ErrorOrigin					:= CONCAT( InstancePath, '.fbGroupEnable' );
			internalState				:= MV_ERROR;
		END_IF
		
	MV_RUN: // ------------------------------------------------------- mover enabled, ready
	
		Ready	:= TRUE;
		Busy	:= FALSE;
		Error	:= FALSE;
		ErrorID	:= 0;
		
		IF internalDisable THEN
			internalDisable		:= FALSE;
			internalState		:= MV_STOPPING;
			
		// Reset all commands issued by method calls
		ELSIF fbMoveAbsCA[0].Busy THEN // OR fbMoveAbs.CommandAborted THEN
			fbMoveAbsCA[0].Execute		:= FALSE;
		ELSIF fbMoveAbsCA[1].Busy THEN
			fbMoveAbsCA[1].Execute		:= FALSE;			
		ELSIF fbAddToGroup.Done THEN
			fbAddToGroup.Execute		:= FALSE;
		ELSIF fbMoveRelCA[0].Busy THEN
			fbMoveRelCA[0].Execute		:= FALSE;
		ELSIF fbMoveRelCA[1].Busy THEN
			fbMoveRelCA[1].Execute		:= FALSE;
			
		// This is different than the other similar cases, since a Stop command should prevent other commands from overriding it, thus
		// the Execute needs to remain High until the command has fully completed.
		ELSIF fbGroupStop.Done THEN
			fbGroupStop.Execute			:= FALSE;

		// And catch all internal function block errors
		ELSIF fbMoveAbsCA[0].Error THEN
			ErrorID					:= fbMoveAbsCA[0].ErrorID;
			ErrorOrigin				:= CONCAT( InstancePath, '.fbMoveAbs[0]' );
			internalState			:= MV_ERROR;
		ELSIF fbMoveAbsCA[1].Error THEN
			ErrorID					:= fbMoveAbsCA[1].ErrorId;
			ErrorOrigin				:= CONCAT( InstancePath, '.fbMoveAbs[1]' );
			internalState			:= MV_ERROR;
		ELSIF fbAddToGroup.Error THEN
			ErrorID					:= fbAddToGroup.ErrorID;
			ErrorOrigin				:= CONCAT( InstancePath, '.fbAddToGroup' );
			internalState			:= MV_ERROR;
		ELSIF fbGroupStop.Error THEN
			ErrorID					:= fbGroupStop.ErrorId;
			ErrorOrigin				:= CONCAT( InstancePath, '.fbGroupStop' );
			internalState			:= MV_ERROR;
		ELSIF fbMoveRelCA[0].Error THEN
			ErrorID					:= fbMoveRelCA[0].ErrorID;
			ErrorOrigin 			:= CONCAT ( InstancePath, '.fbMoveRelCA[0]');
			internalState			:= MV_ERROR;
		ELSIF fbMoveRelCA[1].Error THEN
			ErrorID					:= fbMoveRelCA[1].ErrorID;
			ErrorOrigin 			:= CONCAT ( InstancePath, '.fbMoveRelCA[1]');
			internalState			:= MV_ERROR;
		END_IF
	
	MV_STOPPING:	// ------------------------------------------------------- mover disabling
	
		Ready	:= FALSE;
		Busy	:= TRUE;
		Error	:= FALSE;
		ErrorID	:= 0;
		
		fbPower.Enable				:= FALSE;
		fbPower.Enable_Positive		:= FALSE;
		fbPower.Enable_Negative		:= FALSE;
		fbPower.BufferMode			:= MC_Aborting;
		fbPower.Override			:= 100;
			
		IF fbPower.Status = FALSE THEN
			internalState			:= MV_IDLE;
		END_IF
		
	
	MV_ERROR: // ------------------------------------------------------- mover in error state
	
		Ready	:= FALSE;
		Busy	:= FALSE;
		Error	:= TRUE;
		
END_CASE

fbPower( Axis := AxisReference );
fbReset( Axis := AxisReference );
//fbDisable( Axis := AxisRef );
//fbExternEnable( Axis := AxisRef );
fbAddToGroup( AxesGroup := GroupReference, Axis := AxisReference );

fbGroupStatus( AxesGroup := GroupReference );
fbGroupEnable( AxesGroup := GroupReference );
fbGroupStop( AxesGroup := GroupReference );

fbMoveAbsCA[0]( Axis := AxisReference );
fbMoveAbsCA[1]( Axis := AxisReference );
fbReadStatus( Enable := TRUE, Axis := AxisReference );
fbMoveRelCA[0] (axis :=AxisReference);
fbMoveRelCA[1] (axis :=AxisReference);

fbReadM1DetectMode();
fbReadM1DetectValid();
fbReadM1DetectActive();
fbWriteM1Detect();


]]></ST>
      </Implementation>
    </Method>
    <Method Name="Disable" Id="{2aa14795-54cd-46b8-a131-b1a8801c005f}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD Disable : iMover
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// Sets an internal flag to advance the state machine
internalDisable		:= TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Enable" Id="{77bc5ebc-ace3-48eb-8e85-e45bc80ac98b}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD Enable : iMover
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// Sets an internal flag to advance the state machine
internalEnable		:= TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="GroupStop" Id="{19a65925-9b39-4de9-ab16-7733d66c5fd4}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD GroupStop : iMover
VAR_INPUT
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[


IF NOT( Ready ) THEN	// if th emover is not ready & able to accept a GroupHalt Command

	internalState	:= MV_ERROR;
	ErrorID			:= 904;

ELSE	// otherwise execute the command
	
	fbGroupStop.Execute			:= TRUE;
	fbGroupStop.Deceleration	:= MotionParameters.Deceleration;
	fbGroupStop.Jerk			:= MotionParameters.Jerk;
	
	memset( ADR( internalCurrentDestObjective ), 0, SIZEOF( internalCurrentDestObjective ));
	internalCurrentMoveType		:= MoverCommandType_enum.MOVETYPE_NONE;
	
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoveToPosition" Id="{c28d081f-5f21-4357-8651-768a8cf4ef0e}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD PUBLIC MoveToPosition : iMover
VAR_INPUT
	
	DestinationPosition		: LREAL;	// position on track for a shuttle to move towards

END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT( Ready ) THEN	// if the mover is not ready & able to accept a moveabs command...
	
	internalState	:= MV_ERROR;
	ErrorID			:= 901;
	
ELSE	// otherwise let 'er rip
	
	IF fbMoveAbsCA[0].Busy = FALSE THEN
		
		fbMoveAbsCA[0].Jerk			:= MotionParameters.Jerk;
		fbMoveAbsCA[0].Acceleration	:= MotionParameters.Acceleration;
		fbMoveAbsCA[0].Deceleration	:= MotionParameters.Deceleration;
		fbMoveAbsCA[0].Velocity		:= MotionParameters.Velocity;
		fbMoveAbsCA[0].Direction	:= MotionParameters.Direction;
		
		fbMoveAbsCA[0].Position		:= DestinationPosition;
		
		fbMoveAbsCA[0].BufferMode	:= mcAborting;
		fbMoveAbsCA[0].Execute		:= TRUE;
		 
		fbMoveAbsCA[0].Execute		:= TRUE;		// execute this block, and...
		fbMoveAbsCA[1].Execute		:= FALSE;		// if necessary, interrupt this one
		
	ELSIF fbMoveAbsCA[1].Busy = FALSE THEN
		
		fbMoveAbsCA[1].Jerk			:= MotionParameters.Jerk;
		fbMoveAbsCA[1].Acceleration	:= MotionParameters.Acceleration;
		fbMoveAbsCA[1].Deceleration	:= MotionParameters.Deceleration;
		fbMoveAbsCA[1].Velocity		:= MotionParameters.Velocity;
		fbMoveAbsCA[1].Direction	:= MotionParameters.Direction;
		
		fbMoveAbsCA[1].Position		:= DestinationPosition;
		
		fbMoveAbsCA[1].BufferMode		:= mcAborting;
		fbMoveAbsCA[1].Execute		:= TRUE;
		
		fbMoveAbsCA[1].Execute		:= TRUE;		// execute this block, and...
		fbMoveAbsCA[0].Execute		:= FALSE;		// if necessary, interrupt this one		
		 
	END_IF
	
END_IF

internalCurrentMoveType		:= MOVETYPE_POSITION;
internalCurrentDestPosition := DestinationPosition;

memset( ADR( internalCurrentDestObjective ), 0, SIZEOF( internalCurrentDestObjective ));
internalCurrentDestStation	REF= 0;]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoveToStation" Id="{73370b80-491c-4017-a420-f08c462d830e}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD MoveToStation : iMover
VAR_INPUT
	DestinationStation	: REFERENCE TO Station;	
END_VAR
VAR
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT( Ready ) AND NOT(__ISVALIDREF( DestinationStation )) THEN	// if the mover is not ready & able to accept a moveabs command...
	
	internalState	:= MV_ERROR;
	ErrorID			:= 901;
	
ELSE	// otherwise let 'er rip
	
	IF fbMoveAbsCA[0].Busy = FALSE THEN
		
		fbMoveAbsCA[0].Jerk			:= MotionParameters.Jerk;
		fbMoveAbsCA[0].Acceleration	:= MotionParameters.Acceleration;
		fbMoveAbsCA[0].Deceleration	:= MotionParameters.Deceleration;
		fbMoveAbsCA[0].Velocity		:= MotionParameters.Velocity;
		fbMoveAbsCA[0].Direction	:= MotionParameters.Direction;
		
		fbMoveAbsCA[0].Position		:= DestinationStation.Position;
		
		fbMoveAbsCA[0].BufferMode	:= mcAborting;
		fbMoveAbsCA[0].Execute		:= TRUE;
		 
		fbMoveAbsCA[0].Execute		:= TRUE;		// execute this block, and...
		fbMoveAbsCA[1].Execute		:= FALSE;		// if necessary, interrupt this one
		
	ELSIF fbMoveAbsCA[1].Busy = FALSE THEN
		
		fbMoveAbsCA[1].Jerk			:= MotionParameters.Jerk;
		fbMoveAbsCA[1].Acceleration	:= MotionParameters.Acceleration;
		fbMoveAbsCA[1].Deceleration	:= MotionParameters.Deceleration;
		fbMoveAbsCA[1].Velocity		:= MotionParameters.Velocity;
		fbMoveAbsCA[1].Direction	:= MotionParameters.Direction;
		
		fbMoveAbsCA[1].Position		:= DestinationStation.Position;
		
		fbMoveAbsCA[1].BufferMode	:= mcAborting;
		fbMoveAbsCA[1].Execute		:= TRUE;
		
		fbMoveAbsCA[1].Execute		:= TRUE;		// execute this block, and...
		fbMoveAbsCA[0].Execute		:= FALSE;		// if necessary, interrupt this one		
		 
	END_IF
	
	// Set the current destination object to the instance path of the objective, or 0 if unassigned
	internalCurrentDestPosition		:= DestinationStation.TrackPosition;
	internalCurrentDestObjective	:= SEL( __ISVALIDREF( DestinationStation ), '', DestinationStation.InstancePath );
	internalCurrentDestStation		REF= DestinationStation;
	internalCurrentMoveType			:= MOVETYPE_STATION;
	
	// Register this mover with the station, so the station knows this mover is incoming
	DestinationStation.RegisterMover( THIS^ );
	
END_IF

]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoveVelocity" Id="{b843a8f8-3644-434c-aaf5-7e88053f31b1}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD MoveVelocity : iMover
VAR_INPUT
	DesiredVelocity : LREAL;		//The velocity to be commanded [mm/s]
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT ( ready ) THEN
	
	internalState	:= MV_ERROR;
	ErrorID			:= 902;
	
ELSE
	
	MotionParameters.Velocity	:= DesiredVelocity;	
	
	IF fbMoveRelCA[0].Busy = FALSE THEN
		
		fbMoveRelCA[0].Jerk			:= MotionParameters.Jerk;
		
		fbMoveRelCA[0].Acceleration	:= MotionParameters.Acceleration;
		fbMoveRelCA[0].Deceleration	:= MotionParameters.Deceleration;
		fbMoveRelCA[0].Velocity		:= MotionParameters.Velocity;
		
		fbMoverelCA[0].Distance		:= 1E100;
		      
		fbMoveRelCA[0].BufferMode		:= mcAborting;
		fbMoveRelCA[0].Execute		:= TRUE;
		      
		fbMoveRelCA[0].Execute		:= TRUE;		// execute this block, and...
		fbMoveRelCA[1].Execute		:= FALSE;		// if necessary, interrupt this one
		
	ELSIF fbMoveRelCA[1].Busy = FALSE THEN
		
		fbMoveRelCA[1].Jerk			:= MotionParameters.Jerk;
		
		fbMoveRelCA[1].Acceleration	:= MotionParameters.Acceleration;
		fbMoveRelCA[1].Deceleration	:= MotionParameters.Deceleration;
		fbMoveRelCA[1].Velocity		:= MotionParameters.Velocity;
		      
		fbMoveRelCA[1].Distance		:= 1E100;
		      
		fbMoveRelCA[1].BufferMode	:= mcAborting;
		fbMoveRelCA[1].Execute		:= TRUE;
		      
		fbMoveRelCA[1].Execute		:= TRUE;		// execute this block, and...
		fbMoveRelCA[0].Execute		:= FALSE;		// if necessary, interrupt this one		

		END_IF

END_IF

fbMoveRelCA[0] (axis :=AxisReference);
fbMoveRelCA[1] (axis :=AxisReference);


internalCurrentMoveType		:= MOVETYPE_VELOCITY;
internalCurrentDestPosition := 1E300;

memset( ADR( internalCurrentDestObjective ), 0, SIZEOF( internalCurrentDestObjective ));
internalCurrentDestStation	REF= 0;]]></ST>
      </Implementation>
    </Method>
    <Property Name="Payload" Id="{5caf95a6-ad6c-448d-8947-8c8c07ab0a26}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY Payload : USINT]]></Declaration>
      <Get Name="Get" Id="{8a73f5fd-2b02-4094-9725-10c35f9f9334}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[

Payload	:= internalPayload;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{6f8bbb61-047b-455a-a948-12da14d2f890}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[

internalPayload	:= Payload;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="ReissueCommand" Id="{195ecbe2-3d92-4d60-b9b5-7e1a3292ea5b}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD ReissueCommand : iMover
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[


CASE internalCurrentMoveType OF
	MOVETYPE_NONE:
		// No current command to reissue	
	MOVETYPE_POSITION:
		THIS^.MoveToPosition( internalCurrentDestPosition );
	MOVETYPE_STATION:
		THIS^.MoveToStation( internalCurrentDestStation );
	MOVETYPE_VELOCITY:
		THIS^.MoveVelocity( MotionParameters.Velocity );	
END_CASE
]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetAcceleration" Id="{6c3e67ff-faff-4c11-8768-1de83c7995e4}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD SetAcceleration : iMover
VAR_INPUT
	Acceleration	: LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
MotionParameters.Acceleration		:= Acceleration;

THIS^.ReissueCommand();]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetDeceleration" Id="{05a8542e-78cf-4f19-864b-98da64430703}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD SetDeceleration : iMover
VAR_INPUT
	Deceleration	: LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
MotionParameters.Deceleration	:= Deceleration;

THIS^.ReissueCommand();]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetJerk" Id="{de57e13f-25de-42a4-aec6-c6dc8b78d964}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD SetJerk : iMover
VAR_INPUT
	Jerk		: LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[

MotionParameters.Jerk		:= Jerk;

THIS^.ReissueCommand();]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetVelocity" Id="{530483ab-165f-437b-baf5-2db027b7f044}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD SetVelocity : iMover
VAR_INPUT
	Velocity		: LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[

MotionParameters.Velocity	:= Velocity; 

THIS^.ReissueCommand();]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="Mover">
      <LineId Id="110" Count="0" />
    </LineIds>
    <LineIds Name="Mover.CurrentMoveType.Get">
      <LineId Id="13" Count="0" />
      <LineId Id="12" Count="0" />
    </LineIds>
    <LineIds Name="Mover.CurrentObjective.Get">
      <LineId Id="9" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Mover.CurrestDestinationPosition.Get">
      <LineId Id="20" Count="0" />
      <LineId Id="15" Count="0" />
    </LineIds>
    <LineIds Name="Mover.Cyclic">
      <LineId Id="6" Count="10" />
      <LineId Id="319" Count="1" />
      <LineId Id="323" Count="0" />
      <LineId Id="321" Count="0" />
      <LineId Id="20" Count="139" />
      <LineId Id="161" Count="3" />
      <LineId Id="166" Count="53" />
      <LineId Id="322" Count="0" />
      <LineId Id="220" Count="17" />
      <LineId Id="239" Count="75" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="Mover.Disable">
      <LineId Id="6" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="Mover.Enable">
      <LineId Id="6" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="Mover.GroupStop">
      <LineId Id="6" Count="2" />
      <LineId Id="5" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="28" Count="2" />
      <LineId Id="22" Count="2" />
      <LineId Id="14" Count="0" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="Mover.MoveToPosition">
      <LineId Id="9" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="150" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="78" Count="0" />
      <LineId Id="100" Count="0" />
      <LineId Id="142" Count="0" />
      <LineId Id="82" Count="0" />
      <LineId Id="84" Count="2" />
      <LineId Id="88" Count="10" />
      <LineId Id="143" Count="0" />
      <LineId Id="99" Count="0" />
      <LineId Id="101" Count="6" />
      <LineId Id="109" Count="3" />
      <LineId Id="87" Count="0" />
      <LineId Id="83" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="151" Count="3" />
      <LineId Id="127" Count="0" />
      <LineId Id="161" Count="0" />
    </LineIds>
    <LineIds Name="Mover.MoveToStation">
      <LineId Id="126" Count="2" />
      <LineId Id="218" Count="0" />
      <LineId Id="130" Count="5" />
      <LineId Id="211" Count="0" />
      <LineId Id="136" Count="3" />
      <LineId Id="201" Count="0" />
      <LineId Id="142" Count="0" />
      <LineId Id="202" Count="0" />
      <LineId Id="144" Count="7" />
      <LineId Id="212" Count="0" />
      <LineId Id="152" Count="3" />
      <LineId Id="203" Count="0" />
      <LineId Id="159" Count="0" />
      <LineId Id="204" Count="0" />
      <LineId Id="160" Count="6" />
      <LineId Id="227" Count="0" />
      <LineId Id="229" Count="7" />
      <LineId Id="167" Count="1" />
      <LineId Id="197" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="Mover.MoveVelocity">
      <LineId Id="5" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="10" Count="1" />
      <LineId Id="14" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="70" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="61" Count="1" />
      <LineId Id="18" Count="2" />
      <LineId Id="22" Count="10" />
      <LineId Id="63" Count="1" />
      <LineId Id="33" Count="2" />
      <LineId Id="37" Count="7" />
      <LineId Id="50" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="84" Count="0" />
      <LineId Id="86" Count="1" />
      <LineId Id="85" Count="0" />
      <LineId Id="72" Count="0" />
      <LineId Id="71" Count="0" />
      <LineId Id="73" Count="0" />
      <LineId Id="78" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="79" Count="0" />
    </LineIds>
    <LineIds Name="Mover.Payload.Get">
      <LineId Id="9" Count="1" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Mover.Payload.Set">
      <LineId Id="12" Count="1" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Mover.ReissueCommand">
      <LineId Id="11" Count="0" />
      <LineId Id="14" Count="3" />
      <LineId Id="26" Count="0" />
      <LineId Id="21" Count="4" />
      <LineId Id="27" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="Mover.SetAcceleration">
      <LineId Id="7" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="Mover.SetDeceleration">
      <LineId Id="7" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="12" Count="0" />
    </LineIds>
    <LineIds Name="Mover.SetJerk">
      <LineId Id="7" Count="1" />
      <LineId Id="5" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="Mover.SetVelocity">
      <LineId Id="6" Count="1" />
      <LineId Id="12" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="32" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>