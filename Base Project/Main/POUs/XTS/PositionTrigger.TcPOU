<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="PositionTrigger" Id="{2be242dd-21c3-49cc-ab16-707ac1bbd2e6}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK PositionTrigger EXTENDS Objective IMPLEMENTS iObjective
VAR_INPUT

	ThresholdPosition	: LREAL;
	TriggerDirection	: Tc2_MC2.MC_Direction;
	TrackModulo			: LREAL;

END_VAR
VAR_OUTPUT
	MoverPastPosition	: BOOL;
END_VAR
VAR
	someMoverPast		: BOOL;
	whichMover			: INT;
	i					: INT;
	moverLastPos		: ARRAY[0..GVL.NUM_MOVERS-1] OF LREAL;		// Positions of tracked movers from last cycle
	moverLastTurns		: ARRAY[0..GVL.NUM_MOVERS-1] OF DINT;		// Turn count of tracked movers from last cycle
	positiveRolloverDetected: BOOL;
	negativeRolloverDetected: BOOL;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[
MonitorSuccesses();]]></ST>
    </Implementation>
    <Action Name="MonitorSuccesses" Id="{e9dd629d-8634-4b16-bccb-b96fc6b6cb24}">
      <Implementation>
        <ST><![CDATA[

someMoverPast		:= FALSE;
whichMover			:= 0;


FOR i := 0 TO GVL.NUM_MOVERS-1 DO	
	IF TrackedMovers[i] <> 0 THEN
		
	
		
	
	
		// Determine if a position rollover occured in the last cycle
		IF TrackedMovers[i]^.AxisReference.NcToPlc.ModuloActTurns > moverLastTurns[i] THEN
			positiveRolloverDetected		:= TRUE;
		ELSIF TrackedMovers[i]^.AxisReference.NcToPlc.ModuloActTurns < moverLastTurns[i] THEN
			negativeRolloverDetected		:= TRUE;
		ELSE
			positiveRolloverDetected		:= FALSE;
			negativeRolloverDetected		:= FALSE;
		END_IF
		// Set value for next cycle
		moverLastTurns[i]	:= TrackedMovers[i]^.AxisReference.NcToPlc.ModuloActTurns;
	
		
		// Can combine with above stanza
		IF positiveRolloverDetected THEN
			moverLastPos[i]		:= moverLastPos[i] - TrackModulo;
		ELSIF negativeRolloverDetected THEN
			moverLastPos[i]		:= moverLastPos[i] + TrackModulo;				
		END_IF
		
		
		
		
		
		
		// Watch for movers crossing the threshold position
		IF TriggerDirection = MC_Positive_Direction THEN
			
			IF moverLastPos[i] < ThresholdPosition AND
				TrackedMovers[i]^.AxisReference.NcToPlc.ModuloActPos >= ThresholdPosition THEN
				// Position trigger event detected
				someMoverPast	:= TRUE;
				whichMover		:= i;
			END_IF
			
		ELSIF TriggerDirection = MC_Negative_Direction THEN
			
			IF moverLastPos[i] > ThresholdPosition AND
				TrackedMovers[i]^.AxisReference.NcToPlc.ModuloActPos <= ThresholdPosition THEN
				// Position trigger event detected
				someMoverPast	:= TRUE;
				whichMover		:= i;
			END_IF		
		
		END_IF

		
		
		moverLastPos[i]			:= TrackedMovers[i]^.AxisReference.NcToPlc.ModuloActPos;
		
		
		
		
	ELSE
		IF TriggerDirection = MC_Negative_Direction THEN
			moverLastPos[i]		:= -1E300;	// very negative value, to prevent false-positive triggers on first cycle
		ELSIF TriggerDirection = MC_Positive_Direction THEN
			moverLastPos[i]		:= 1E300;	// very positive value, to prevent false-positive triggers on first cycle
		END_IF
	END_IF

	
	
	
	
END_FOR




IF someMoverPast THEN
	MoverPastPosition		:= TRUE;
	CurrentMover			:= TrackedMovers[whichMover];
ELSE
	MoverPastPosition		:= FALSE;
	CurrentMover			:= 0;		
END_IF]]></ST>
      </Implementation>
    </Action>
    <Method Name="UnregisterCurrent" Id="{56132429-76be-494a-b3e1-c40fca5dc68b}">
      <Declaration><![CDATA[METHOD UnregisterCurrent : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[

THIS^.UnregisterMover(CurrentMover);]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="PositionTrigger">
      <LineId Id="10" Count="0" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="PositionTrigger.MonitorSuccesses">
      <LineId Id="2" Count="3" />
      <LineId Id="48" Count="0" />
      <LineId Id="6" Count="1" />
      <LineId Id="9" Count="0" />
      <LineId Id="101" Count="1" />
      <LineId Id="71" Count="0" />
      <LineId Id="154" Count="1" />
      <LineId Id="72" Count="1" />
      <LineId Id="86" Count="0" />
      <LineId Id="88" Count="1" />
      <LineId Id="93" Count="2" />
      <LineId Id="87" Count="0" />
      <LineId Id="96" Count="1" />
      <LineId Id="75" Count="0" />
      <LineId Id="98" Count="0" />
      <LineId Id="118" Count="1" />
      <LineId Id="125" Count="1" />
      <LineId Id="128" Count="0" />
      <LineId Id="124" Count="0" />
      <LineId Id="149" Count="4" />
      <LineId Id="120" Count="0" />
      <LineId Id="129" Count="1" />
      <LineId Id="136" Count="2" />
      <LineId Id="141" Count="0" />
      <LineId Id="156" Count="1" />
      <LineId Id="139" Count="0" />
      <LineId Id="132" Count="0" />
      <LineId Id="134" Count="1" />
      <LineId Id="143" Count="0" />
      <LineId Id="146" Count="0" />
      <LineId Id="148" Count="0" />
      <LineId Id="158" Count="1" />
      <LineId Id="147" Count="0" />
      <LineId Id="145" Count="0" />
      <LineId Id="113" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="166" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="160" Count="0" />
      <LineId Id="167" Count="0" />
      <LineId Id="161" Count="1" />
      <LineId Id="63" Count="2" />
      <LineId Id="67" Count="1" />
      <LineId Id="66" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="163" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="164" Count="1" />
      <LineId Id="16" Count="1" />
      <LineId Id="53" Count="2" />
      <LineId Id="18" Count="6" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="PositionTrigger.UnregisterCurrent">
      <LineId Id="6" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>