<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="MAIN" Id="{0790caa7-8a3f-4f91-b0f8-9ebb3db3858d}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
	

	// ========= Example Application Variables =========
	
	nextStation				: USINT := 4;
	
	lowVelocity				: LREAL := 200; 	// mm/s
	mediumVelocity			: LREAL := 800;		// mm/s
	highVelocity			: LREAL := 2000; 	// mm/s

	
	// ========= Helper, State, & Index Variables =========
	
	i						: UINT;					// index variable; gets reused in various FOR loops
	n						: UINT;					// secondary index variable, for enabling movers
	allMoversEnabled		: BOOL;					// helper flag for verifying enable status of all movers
	
	StationTimer			: ARRAY [0..GVL.NUM_STATIONS] OF TON;		// timer blocks, for station dwells
	
	MainState				: MainState_enum;		// enumeration for the Main state machine
	MainCommands			: MainCommands_typ;		// command struct for cycling thru the state machine
	
		
	// ========= Linked NC Variables & References =========
	
	
	GroupRef				: AXES_GROUP_REF;							// linked to the Collision Avoidance group and passed cyclically to every Mover object
	Mover					: ARRAY [0..GVL.NUM_MOVERS-1] OF Mover;		// instantiation of Mover objects. Matches the number of movers on the system
	
	
	// ========= Objectives & Parameters =========
	
	
	MoverList				: MoverList;						
	ParameterSet			: MotionParameters_typ;
		
	Station					: ARRAY [0..GVL.NUM_STATIONS-1] OF Station;		
	PositionTrigger			: ARRAY [0..3] OF PositionTrigger;		
	SpeedTrigger			: ARRAY [0..1] OF SpeedTrigger;
	Zone					: ARRAY [0..3] OF Zone;	

END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[



CASE MainState OF
	MS_DISABLED:	// ------------------------------------------------------- IDLE STATE
	
	
		IF MainCommands.Enable THEN
			MainState		:= MS_INITIALIZING_MOVERS;
		END_IF
	
		
	MS_INITIALIZING_MOVERS: 	// --------------------------------------- SET MOVER MOTION PARAMETERS
	
	
		FOR i := 0 TO GVL.NUM_MOVERS-1 DO
			ParameterSet.Jerk					:= 1E5;		// mm/s3
			ParameterSet.Acceleration			:= 1E4;		// mm/s2
			ParameterSet.Deceleration			:= 1E4;		// mm/s2
			ParameterSet.Velocity				:= 1E3;		// mm/s
			ParameterSet.Direction				:= mcDirectionPositive;

			Mover[i].MotionParameters			:= ParameterSet;
		END_FOR
		
		MainState			:= MS_ENABLING_MOVERS;	
		
	
	MS_ENABLING_MOVERS:	// ----------------------------------------------- RESETTING AND ENABLING AXES
	
	
		allMoversEnabled		:= TRUE; // default ...
		
		FOR i := 0 TO GVL.NUM_MOVERS - 1 DO
			Mover[i].Enable();
			
			IF Mover[i].Ready = FALSE THEN
				allMoversEnabled	:= FALSE;
			END_IF
		END_FOR
		
		IF allMoversEnabled THEN
			MainState		:= MS_INITIALIZING_OBJECTIVES;
		END_IF		
		
	
	MS_INITIALIZING_OBJECTIVES:	// --------------------------------------- WRITING OBJECTIVE PARAMETERS
	
		// Initialize station positions
		Station[0].TrackPosition		:= 0;
		Station[1].TrackPosition		:= 750;
		Station[2].TrackPosition		:= 1200;
		Station[3].TrackPosition		:= 1300;
		Station[4].TrackPosition		:= 1400;
		
		PositionTrigger[0].TrackPosition	:= 1500;
		PositionTrigger[1].TrackPosition	:= 2000;
		PositionTrigger[2].TrackPosition	:= 3500;
		PositionTrigger[3].TrackPosition	:= 4000;
		
		SpeedTrigger[0].ThresholdVelocity	:= 2000;
		
		Zone[0].StartPosition				:= 3750;
		Zone[0].EndPosition					:= 750;
		
		Zone[1].StartPosition				:= 750;
		Zone[1].EndPosition					:= 1750;
		
		Zone[2].StartPosition				:= 1750;
		Zone[2].EndPosition					:= 2750;
		
		Zone[3].StartPosition				:= 2750;
		Zone[3].EndPosition					:= 3750;
							
		MainState			:= MS_ENABLED;
		
	MS_ENABLED:	// ------------------------------------------------------- MOVERS ENABLED, STOPPED
	


		IF MainCommands.Start THEN
			
			// ===== RECOVERY LOGIC =====
			
			(*
			Recovery is typically very application-specific. Each implementation will need to determine
			what to do with work-in-progres, rejects, movers with unknown product status, etc.s
			*)			
			
			// Register all movers with all Zones, for recovery
			FOR i := 0 TO GVL.NUM_MOVERS - 1 DO				
				Zone[0].RegisterMover( Mover[i] );
				Zone[1].RegisterMover( Mover[i] );
				Zone[2].RegisterMover( Mover[i] );
				Zone[3].RegisterMover( Mover[i] );
			END_FOR
			
			
			Zone[0].CurrentMoverList.SetAllVelocity( 800 ).MoveAllToStation( Station[0] );
			Zone[1].CurrentMoverList.SetAllVelocity( 600 ).MoveAllToStation( Station[0] );
			Zone[2].CurrentMoverList.SetAllVelocity( 400 ).MoveAllToStation( Station[0] );
			Zone[3].CurrentMoverList.SetAllVelocity( 200 ).MoveAllToStation( Station[0] );			

			// ===== END =====
		
			MainState	:= MS_RUN;
			
		ELSIF MainCommands.Disable THEN
			MainState	:= MS_DISABLING;
		END_IF
	
	MS_RUN: 	// ------------------------------------------------------- OPERATING
	

		
	
	
		
		// Station 0 Logic
		IF Station[0].MoverInPosition THEN
			StationTimer[0]( IN := TRUE, PT := T#1000MS );
			
			IF StationTimer[0].Q THEN
				Station[0].CurrentMover.SetVelocity( mediumVelocity );
				Station[0].CurrentMover.MoveToStation( Station[1] );
				
			END_IF
		ELSE
			StationTimer[0]( IN := FALSE );
		END_IF
		
		
		
		// Station 1 Logic		
		IF Station[1].MoverInPosition THEN
			StationTimer[1]( IN := TRUE, PT := T#250MS );
			
			IF StationTimer[1].Q THEN
				Station[1].CurrentMover.SetVelocity( mediumVelocity );
				Station[1].CurrentMover.MoveToStation( Station[ nextStation ] );
				nextStation := nextStation - 1;
				IF nextStation = 1 THEN
					nextStation	:= 4;
				END_IF
			END_IF
		ELSE
			StationTimer[1]( IN := FALSE );
		END_IF
		
		
		
		
		IF Station[2].MoverInPosition AND Station[3].MoverInPosition AND Station[4].MoverInPosition THEN
			StationTimer[2]( IN := TRUE, PT := T#750MS );
			
			IF StationTimer[2].Q THEN
				PositionTrigger[0].RegisterMover( Station[2].CurrentMover );
				PositionTrigger[0].RegisterMover( Station[3].CurrentMover );
				PositionTrigger[0].RegisterMover( Station[4].CurrentMover );
			
				
				Station[2].CurrentMover.MoveVelocity( 500 );
				Station[3].CurrentMover.MoveVelocity( 500 );
				Station[4].CurrentMover.MoveVelocity( 500 );
			END_IF
		ELSE
			StationTimer[2]( IN := FALSE );
		END_IF
		

		
		
		
		// Position Trigger 0 Logic
		IF PositionTrigger[0].MoverPassedPosition THEN
			PositionTrigger[1].RegisterMover( PositionTrigger[0].CurrentMover );	
		
			PositionTrigger[0].CurrentMover.SetVelocity( lowVelocity );			
			
			PositionTrigger[0].UnregisterCurrent();
		END_IF
		
		
		

		
		// Position Trigger 1 Logic
		IF PositionTrigger[1].MoverPassedPosition THEN
			SpeedTrigger[0].RegisterMover( PositionTrigger[1].CurrentMover );

			PositionTrigger[1].CurrentMover.SetVelocity( highVelocity );	
		
			PositionTrigger[1].UnregisterCurrent();
		END_IF		
		
		
		
		IF SpeedTrigger[0].MoverInVelocity THEN
			SpeedTrigger[0].CurrentMover.SetVelocity( mediumVelocity );
			PositionTrigger[2].RegisterMover( SpeedTrigger[0].CurrentMover );
			SpeedTrigger[0].UnregisterCurrent();
		END_IF
		
		
		
		IF PositionTrigger[2].MoverPassedPosition THEN

			PositionTrigger[2].CurrentMover.SetVelocity( lowVelocity );
			PositionTrigger[2].CurrentMover.MoveToStation( Station[0] );
			

			PositionTrigger[2].UnregisterCurrent();
		END_IF
		
		
		
		
		
		IF MainCommands.Stop THEN
			MainCommands.Start		:= FALSE;
			MainState				:= MS_STOPPING;
		ELSIF MainCommands.Disable THEN
			MainCommands.Enable		:= FALSE;
			MainState				:= MS_STOPPING;
		END_IF
	
	MS_STOPPING:	// --------------------------------------------------- STOPPING MOVERS
	
		// Stop all movers
		FOR i := 0 TO GVL.NUM_MOVERS - 1 DO 
			Mover[i].Disable();
		END_FOR
						
		IF MainCommands.Disable THEN
			MainCommands.Enable		:= FALSE;
			MainState				:= MS_DISABLING;
		END_IF
	
	MS_DISABLING:	// --------------------------------------------------- DISABLING MOVERS
	
		// Reinit nextStation
		nextStation	:= 4;
		
		// Unregister everything from all stations
		FOR i := 0 TO GVL.NUM_STATIONS - 1 DO
			Station[i].UnregisterAll();
		END_FOR
		
		// Unregister everything from all Pos Trigs
		FOR i := 0 TO SIZEOF( PositionTrigger ) / SIZEOF( PositionTrigger[0] ) - 1 DO
			PositionTrigger[i].UnregisterAll();
		END_FOR
		
		// Unregister everything from all speed trigs
		FOR i := 0 TO SIZEOF( SpeedTrigger ) / SIZEOF( SpeedTrigger[0] ) - 1 DO
			SpeedTrigger[i].UnregisterAll();
		END_FOR
		
		// Unregister everything from all zones
		FOR i := 0 TO SIZEOF( Zone ) / SIZEOF( Zone[0] ) - 1 DO
			Zone[i].UnregisterAll();
		END_FOR
		
		IF (* all movers are disabled *) TRUE THEN			
			MainState		:= MS_DISABLED;		
		END_IF
	
	MS_ERROR:		// --------------------------------------------------- ERRORSTATE
	
	MS_DEBUG:	// ------------------------------------------------------- DEV USE ONLY
		
END_CASE;




// Call all mover function blocks cyclically
FOR i := 0 TO GVL.NUM_MOVERS-1 DO
	Mover[i].Cyclic( GroupRef );
END_FOR;

// Call all station function blocks cyclically
FOR i := 0 TO GVL.NUM_STATIONS-1 DO
	Station[i].Cyclic();
END_FOR

// Call trigger function blocks cyclically
PositionTrigger[0].Cyclic();
PositionTrigger[1].Cyclic();
PositionTrigger[2].Cyclic();

]]></ST>
    </Implementation>
    <LineIds Name="MAIN">
      <LineId Id="4918" Count="1" />
      <LineId Id="3503" Count="0" />
      <LineId Id="710" Count="0" />
      <LineId Id="1457" Count="0" />
      <LineId Id="3522" Count="0" />
      <LineId Id="3552" Count="0" />
      <LineId Id="3599" Count="0" />
      <LineId Id="3553" Count="1" />
      <LineId Id="3548" Count="0" />
      <LineId Id="3527" Count="0" />
      <LineId Id="3600" Count="0" />
      <LineId Id="3528" Count="0" />
      <LineId Id="3584" Count="0" />
      <LineId Id="3601" Count="0" />
      <LineId Id="3586" Count="0" />
      <LineId Id="3588" Count="2" />
      <LineId Id="3598" Count="0" />
      <LineId Id="3591" Count="0" />
      <LineId Id="3593" Count="3" />
      <LineId Id="3585" Count="0" />
      <LineId Id="3602" Count="0" />
      <LineId Id="3529" Count="0" />
      <LineId Id="3531" Count="0" />
      <LineId Id="3570" Count="0" />
      <LineId Id="3603" Count="0" />
      <LineId Id="3572" Count="2" />
      <LineId Id="3576" Count="0" />
      <LineId Id="3857" Count="0" />
      <LineId Id="3577" Count="6" />
      <LineId Id="3571" Count="0" />
      <LineId Id="3605" Count="0" />
      <LineId Id="3532" Count="1" />
      <LineId Id="4023" Count="1" />
      <LineId Id="4033" Count="0" />
      <LineId Id="4035" Count="3" />
      <LineId Id="3611" Count="0" />
      <LineId Id="4040" Count="5" />
      <LineId Id="3620" Count="11" />
      <LineId Id="3860" Count="0" />
      <LineId Id="3633" Count="0" />
      <LineId Id="3607" Count="0" />
      <LineId Id="3636" Count="0" />
      <LineId Id="5009" Count="0" />
      <LineId Id="5018" Count="0" />
      <LineId Id="3637" Count="2" />
      <LineId Id="3650" Count="0" />
      <LineId Id="4324" Count="0" />
      <LineId Id="4868" Count="0" />
      <LineId Id="4872" Count="0" />
      <LineId Id="4874" Count="0" />
      <LineId Id="4871" Count="0" />
      <LineId Id="4870" Count="0" />
      <LineId Id="4168" Count="0" />
      <LineId Id="3667" Count="0" />
      <LineId Id="3655" Count="4" />
      <LineId Id="4473" Count="2" />
      <LineId Id="4862" Count="0" />
      <LineId Id="4866" Count="0" />
      <LineId Id="3987" Count="0" />
      <LineId Id="4405" Count="0" />
      <LineId Id="3652" Count="2" />
      <LineId Id="3648" Count="1" />
      <LineId Id="3643" Count="1" />
      <LineId Id="3642" Count="0" />
      <LineId Id="3534" Count="0" />
      <LineId Id="4622" Count="0" />
      <LineId Id="4630" Count="1" />
      <LineId Id="3535" Count="0" />
      <LineId Id="3672" Count="0" />
      <LineId Id="3674" Count="5" />
      <LineId Id="4180" Count="0" />
      <LineId Id="3682" Count="0" />
      <LineId Id="4181" Count="0" />
      <LineId Id="3683" Count="7" />
      <LineId Id="3692" Count="0" />
      <LineId Id="4182" Count="0" />
      <LineId Id="4526" Count="1" />
      <LineId Id="4525" Count="0" />
      <LineId Id="4253" Count="3" />
      <LineId Id="4187" Count="0" />
      <LineId Id="4528" Count="0" />
      <LineId Id="4523" Count="1" />
      <LineId Id="4183" Count="0" />
      <LineId Id="4391" Count="2" />
      <LineId Id="4204" Count="2" />
      <LineId Id="4208" Count="1" />
      <LineId Id="4214" Count="0" />
      <LineId Id="4217" Count="1" />
      <LineId Id="4216" Count="0" />
      <LineId Id="4219" Count="0" />
      <LineId Id="4210" Count="0" />
      <LineId Id="4212" Count="1" />
      <LineId Id="4211" Count="0" />
      <LineId Id="5062" Count="1" />
      <LineId Id="4207" Count="0" />
      <LineId Id="3712" Count="0" />
      <LineId Id="4220" Count="0" />
      <LineId Id="3713" Count="2" />
      <LineId Id="3837" Count="2" />
      <LineId Id="3716" Count="1" />
      <LineId Id="3719" Count="4" />
      <LineId Id="3726" Count="0" />
      <LineId Id="4221" Count="0" />
      <LineId Id="3727" Count="1" />
      <LineId Id="3840" Count="0" />
      <LineId Id="4406" Count="0" />
      <LineId Id="4411" Count="0" />
      <LineId Id="4410" Count="0" />
      <LineId Id="3730" Count="1" />
      <LineId Id="3742" Count="0" />
      <LineId Id="4412" Count="4" />
      <LineId Id="4418" Count="1" />
      <LineId Id="4417" Count="0" />
      <LineId Id="3744" Count="1" />
      <LineId Id="4226" Count="0" />
      <LineId Id="4270" Count="0" />
      <LineId Id="4381" Count="0" />
      <LineId Id="4274" Count="0" />
      <LineId Id="4266" Count="0" />
      <LineId Id="4273" Count="0" />
      <LineId Id="4267" Count="0" />
      <LineId Id="4265" Count="0" />
      <LineId Id="4229" Count="0" />
      <LineId Id="3746" Count="0" />
      <LineId Id="3756" Count="4" />
      <LineId Id="4816" Count="0" />
      <LineId Id="3852" Count="1" />
      <LineId Id="4817" Count="0" />
      <LineId Id="3854" Count="1" />
      <LineId Id="3761" Count="0" />
      <LineId Id="3670" Count="0" />
      <LineId Id="4776" Count="0" />
      <LineId Id="4781" Count="0" />
      <LineId Id="4777" Count="2" />
      <LineId Id="3536" Count="0" />
      <LineId Id="3768" Count="0" />
      <LineId Id="4818" Count="0" />
      <LineId Id="3778" Count="0" />
      <LineId Id="3770" Count="0" />
      <LineId Id="3772" Count="2" />
      <LineId Id="4795" Count="0" />
      <LineId Id="4965" Count="0" />
      <LineId Id="4963" Count="0" />
      <LineId Id="4804" Count="0" />
      <LineId Id="4796" Count="3" />
      <LineId Id="4805" Count="0" />
      <LineId Id="4800" Count="2" />
      <LineId Id="4806" Count="9" />
      <LineId Id="3780" Count="1" />
      <LineId Id="3784" Count="0" />
      <LineId Id="3783" Count="0" />
      <LineId Id="3786" Count="2" />
      <LineId Id="3791" Count="1" />
      <LineId Id="3789" Count="0" />
      <LineId Id="3542" Count="1" />
      <LineId Id="3545" Count="0" />
      <LineId Id="2547" Count="0" />
      <LineId Id="2546" Count="0" />
      <LineId Id="763" Count="1" />
      <LineId Id="3793" Count="1" />
      <LineId Id="765" Count="2" />
      <LineId Id="2548" Count="0" />
      <LineId Id="878" Count="1" />
      <LineId Id="881" Count="1" />
      <LineId Id="4259" Count="0" />
      <LineId Id="2549" Count="0" />
      <LineId Id="2538" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>