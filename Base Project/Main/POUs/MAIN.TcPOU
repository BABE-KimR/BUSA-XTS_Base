<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="MAIN" Id="{0790caa7-8a3f-4f91-b0f8-9ebb3db3858d}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
	

	// helper, state, index variables
	i						: UINT;
	n						: UINT;
	MainState				: UINT;
	
	StationTimer			: ARRAY [0..GVL.NUM_STATIONS] OF TON;
	nextStation				: USINT := 2;
	
	bInitialMovement		: BOOL;
	
	lowVelocity				: LREAL := 200; // mm/s
	mediumVelocity			: LREAL := 800;	// mm/s
	highVelocity			: LREAL := 2000; // mm/s
	
	// linked NC handles
	GroupRef				: AXES_GROUP_REF;
	Mover					: ARRAY [0..GVL.NUM_MOVERS-1] OF Mover;
	
	MoverList				: MoverList;
	
	ParameterSet			: MoverParameters_typ;
	
	// Objectives & Parameters
	
	// Todo initialize this in the code with the prop Setter, not by addressing an internal variable
		
	Station					: ARRAY [0..GVL.NUM_STATIONS-1] OF Station;		
	PositionTrigger			: ARRAY [0..1] OF PositionTrigger;		
	SpeedTrigger			: ARRAY [0..0] OF SpeedTrigger;
	Zone					: ARRAY [0..3] OF Zone;	
	
	// User commands									
	bCommandEnable			: BOOL;	
		
	allMoversEnabled: BOOL;
	
	MoveToStation: INT;
	bStorage: BOOL;
END_VAR

VAR_INPUT
	nGoalVelocity: INT;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[

CASE MainState OF
	0:	// -------------------------------------------- Idle state
	
		IF bCommandEnable THEN
			MainState		:= 10;
		END_IF
		
	10: // -------------------------------------------- Init Stations, Position Triggers
	
		Station[0].TrackPosition			:= 0;
		Station[1].TrackPosition			:= 1500;
		
		
		PositionTrigger[0].TrackPosition	:= 500;
		PositionTrigger[0].TriggerDirection	:= mcDirectionPositive;
		
		PositionTrigger[1].TrackPosition	:= 1000;
		PositionTrigger[1].TriggerDirection := mcDirectionPositive;
		
		SpeedTrigger[0].ThresholdVelocity	:= 1900;
		
		Zone[0].StartPosition				:= 3750;
		Zone[0].EndPosition					:= 750;
		
		Zone[1].StartPosition				:= 750;
		Zone[1].EndPosition					:= 1750;
		
		Zone[2].StartPosition				:= 1750;
		Zone[2].EndPosition					:= 2750;
		
		Zone[3].StartPosition				:= 2750;
		Zone[3].EndPosition					:= 3750;
					
		MainState		:= 20;
		
	20: // -------------------------------------------- Test enable state
		
		allMoversEnabled		:= TRUE; // default ...
		
		FOR i := 0 TO GVL.NUM_MOVERS - 1 DO
			Mover[i].Enable		:= TRUE;
			
			IF Mover[i].Ready = FALSE THEN
				allMoversEnabled	:= FALSE;
			END_IF
		END_FOR
		
		IF allMoversEnabled THEN
			MainState		:= 30;
		END_IF			
	
	
	30:	// -------------------------------------------- Set all motion parameters
	
		FOR i := 0 TO GVL.NUM_MOVERS-1 DO
			ParameterSet.Jerk					:= 1e5;
			ParameterSet.Acceleration			:= 1E4;		// mm/s2
			ParameterSet.Deceleration			:= 1E4;		// mm/s2
			ParameterSet.Direction				:= mcDirectionPositive;
			ParameterSet.Velocity				:= 1E3;		// mm/s

			Mover[i].MotionParameters			:= ParameterSet;
		END_FOR
		
		//bInitialMovement	:= TRUE;
		MainState			:= 40;
	
	40:	// -------------------------------------------- Ready for commands
	
		// Move all shuttles to specified stations
		IF bInitialMovement THEN
			
			FOR i := 0 TO GVL.NUM_MOVERS - 1 DO				
				Zone[0].RegisterMover( Mover[i] );
				Zone[1].RegisterMover( Mover[i] );
				Zone[2].RegisterMover( Mover[i] );
				Zone[3].RegisterMover( Mover[i] );			
			END_FOR
			
			Zone[0].GetMoverList().MoveAllToStation( Station[0] );
			Zone[1].GetMoverList().MoveAllToStation( Station[0] );
			
			Zone[2].GetMoverList().MoveAllToStation( Station[0] );
			Zone[3].GetMoverList().MoveAllToStation( Station[0] );
		
			bInitialMovement	:= FALSE;
		END_IF
		
		// ============================================ Example traffic logic below
		
		
		// Station 0 Logic
		IF Station[0].MoverInPosition THEN
			StationTimer[0]( IN := TRUE, PT := T#250MS );
			
			IF StationTimer[0].Q THEN
				Station[0].CurrentMover.SetAcceleration(( nGoalVelocity-Station[0].CurrentMover.AxisReference.NcToPlc.ActVelo)/((2*(PositionTrigger[0].TrackPosition - Station[0].TrackPosition))/(Station[0].CurrentMover.AxisReference.NcToPlc.ActVelo+nGoalVelocity)));
				PositionTrigger[0].RegisterMover( Station[0].CurrentMover );
				Station[0].CurrentMover.movevelocity( nGoalVelocity);
			END_IF
		ELSE
			StationTimer[0]( IN := FALSE );
		END_IF
		
		//Station 0 trigger
	(*	IF PositionTrigger[0].MoverPassedPosition THEN
			positionTrigger[0].CurrentMover.MoveVelocity( nGoalVelocity );
			PositionTrigger[1].RegisterMover( PositionTrigger[0].CurrentMover );
			PositionTrigger[0].UnregisterCurrent();
		END_IF
*)
		//Station 1 Trigger
		IF positionTrigger[1].MoverPassedPosition THEN
			PositionTrigger[1].CurrentMover.SetAcceleration(4000);
			PositionTrigger[1].CurrentMover.SetVelocity(4000);
			bStorage :=UDINT_TO_BOOL(PositionTrigger[1].CurrentMover.AxisReference.NcToPlc.AxisId MOD 2);
			IF bStorage THEN
				IF bStorage THEN
					Station[0].UnregisterMover(PositionTrigger[1].CurrentMover);
					PositionTrigger[1].CurrentMover.MoveToStation(Station[1]);
				ELSE
					positionTrigger[1].CurrentMover.MoveToStation(Station[0]);	
				END_IF
			END_IF
		END_IF
		
		//Station 1 logic
		IF Station[1].MoverInPosition THEN
			Station[1].CurrentMover.MoveToStation( Station[0] );
		END_IF
		

	50: // -------------------------------------------- Disabling
	
		FOR i := 0 TO GVL.NUM_MOVERS-1 DO
			Mover[i].Enable		:= FALSE;
		END_FOR 
		MainState				:= 0;		
		
END_CASE;



// Call all mover function blocks cyclically
FOR i := 0 TO GVL.NUM_MOVERS-1 DO
	Mover[i]( GroupReference := GroupRef );
END_FOR;

// Call all station function blocks cyclically
FOR i := 0 TO GVL.NUM_STATIONS-1 DO
	Station[i].Cyclic();
END_FOR

// Call trigger function blocks cyclically
PositionTrigger[0].Cyclic();
PositionTrigger[1].Cyclic();

]]></ST>
    </Implementation>
    <LineIds Name="MAIN">
      <LineId Id="709" Count="1" />
      <LineId Id="1457" Count="0" />
      <LineId Id="712" Count="2" />
      <LineId Id="2624" Count="6" />
      <LineId Id="2633" Count="0" />
      <LineId Id="2636" Count="1" />
      <LineId Id="2635" Count="0" />
      <LineId Id="2638" Count="0" />
      <LineId Id="2766" Count="1" />
      <LineId Id="3385" Count="11" />
      <LineId Id="3413" Count="0" />
      <LineId Id="2632" Count="0" />
      <LineId Id="2824" Count="2" />
      <LineId Id="2837" Count="0" />
      <LineId Id="2836" Count="0" />
      <LineId Id="2839" Count="0" />
      <LineId Id="2828" Count="0" />
      <LineId Id="2841" Count="3" />
      <LineId Id="2829" Count="0" />
      <LineId Id="2834" Count="0" />
      <LineId Id="2830" Count="1" />
      <LineId Id="2845" Count="0" />
      <LineId Id="2806" Count="0" />
      <LineId Id="727" Count="3" />
      <LineId Id="1804" Count="1" />
      <LineId Id="3456" Count="0" />
      <LineId Id="1433" Count="0" />
      <LineId Id="1422" Count="0" />
      <LineId Id="1435" Count="0" />
      <LineId Id="731" Count="2" />
      <LineId Id="2537" Count="0" />
      <LineId Id="734" Count="0" />
      <LineId Id="743" Count="1" />
      <LineId Id="2525" Count="0" />
      <LineId Id="2527" Count="1" />
      <LineId Id="3397" Count="1" />
      <LineId Id="3404" Count="0" />
      <LineId Id="3406" Count="2" />
      <LineId Id="3403" Count="0" />
      <LineId Id="3399" Count="1" />
      <LineId Id="3409" Count="3" />
      <LineId Id="2531" Count="1" />
      <LineId Id="2524" Count="0" />
      <LineId Id="2376" Count="1" />
      <LineId Id="2385" Count="0" />
      <LineId Id="2395" Count="0" />
      <LineId Id="2409" Count="0" />
      <LineId Id="2386" Count="1" />
      <LineId Id="2391" Count="2" />
      <LineId Id="3506" Count="3" />
      <LineId Id="2497" Count="0" />
      <LineId Id="2388" Count="0" />
      <LineId Id="2462" Count="0" />
      <LineId Id="2378" Count="0" />
      <LineId Id="2410" Count="1" />
      <LineId Id="3557" Count="4" />
      <LineId Id="3556" Count="0" />
      <LineId Id="2412" Count="0" />
      <LineId Id="3562" Count="0" />
      <LineId Id="3566" Count="0" />
      <LineId Id="3573" Count="0" />
      <LineId Id="3572" Count="0" />
      <LineId Id="3567" Count="3" />
      <LineId Id="3574" Count="1" />
      <LineId Id="3571" Count="0" />
      <LineId Id="3564" Count="1" />
      <LineId Id="3576" Count="0" />
      <LineId Id="3578" Count="3" />
      <LineId Id="3577" Count="0" />
      <LineId Id="1418" Count="0" />
      <LineId Id="1438" Count="1" />
      <LineId Id="1455" Count="0" />
      <LineId Id="1454" Count="0" />
      <LineId Id="760" Count="1" />
      <LineId Id="2547" Count="0" />
      <LineId Id="2546" Count="0" />
      <LineId Id="763" Count="4" />
      <LineId Id="2548" Count="0" />
      <LineId Id="878" Count="1" />
      <LineId Id="881" Count="1" />
      <LineId Id="2549" Count="0" />
      <LineId Id="2538" Count="1" />
      <LineId Id="2542" Count="0" />
      <LineId Id="2544" Count="0" />
      <LineId Id="2543" Count="0" />
      <LineId Id="592" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>