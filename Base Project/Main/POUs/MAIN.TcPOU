<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="MAIN" Id="{0790caa7-8a3f-4f91-b0f8-9ebb3db3858d}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR

    // ========= Example Application Variables =========

    nextStation 		: USINT := 4;
                    	
    lowVelocity    		: LREAL := 200;  	// mm/s
    mediumVelocity 		: LREAL := 800;  	// mm/s
    highVelocity   		: LREAL := 2000; 	// mm/s

    // ========= Helper, State, & Index Variables =========

    i                	: UINT; 	// index variable; gets reused in various FOR loops
    n                	: UINT; 	// secondary index variable, for enabling movers
    allMoversEnabled 	: BOOL; 	// helper flag for verifying enable status of all movers
	allMoversDisabled	: BOOL;		// helper flag for verifying disable status of all movers
	allMoversHalted		: BOOL;		// helper flag for verifying halt status of all movers

    StationTimer 		: ARRAY[0..GVL.NUM_STATIONS] OF TON; // timer blocks, for station dwells
                 		
    MainState    		: MainState_enum;   	// enumeration for the Main state machine
    MainCommands 		: MainCommands_typ; 	// command struct for cycling thru the state machine

    // ========= Linked NC Variables & References =========

    GroupRef 			: AXES_GROUP_REF;                       	 // linked to the Collision Avoidance group and passed cyclically to every Mover object
    Mover    			: ARRAY[0..GVL.NUM_MOVERS - 1] OF Mover; 	// instantiation of Mover objects. Matches the number of movers on the system

    // ========= Objectives & Parameters =========

    MoverList    		: MoverList;
    ParameterSet 		: MotionParameters_typ;

    Station         	: ARRAY[0..GVL.NUM_STATIONS - 1] OF Station;
    PositionTrigger 	: ARRAY[0..3] OF PositionTrigger;
    SpeedTrigger    	: ARRAY[0..1] OF SpeedTrigger;
    Zone            	: ARRAY[0..3] OF Zone;
	
	testVar: BOOL;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[
(* ======================================================================================

--- XTS Starter Project ---

This MAIN (PRG) is intended to serve as an example, which can be modified to suit your specific application.

No programming changes should be necessary inside the provided XTS objects / function block definitions.
They are intended to be simply instantiated and controlled via the provided methods and properties.
However the objects are provided as open-source for modification and extension as needed.

Documentation for these objects can be found online at:
https://beckhoff-usa-community.github.io/XTS_Base/

- XTS US Product Management Team

====================================================================================== *)

CASE MainState OF
    MS_DISABLED: // --------------------------------------------------------- IDLE STATE

        MainCommands.Start		:= FALSE;
		MainCommands.Stop		:= FALSE;
		
        IF MainCommands.Enable THEN
            MainCommands.Disable := FALSE;
            MainState            := MS_INITIALIZING_MOVERS;
        END_IF

    MS_INITIALIZING_MOVERS: // --------------------------------------------- SET MOVER MOTION PARAMETERS

		ParameterSet.Jerk         := 1E5; // mm/s3
		ParameterSet.Acceleration := 1E4; // mm/s2
		ParameterSet.Deceleration := 1E4; // mm/s2
		ParameterSet.Velocity     := 1E3; // mm/s
		ParameterSet.Direction    := mcDirectionPositive;

        FOR i := 0 TO GVL.NUM_MOVERS - 1 DO
            Mover[i].MotionParameters := ParameterSet;
        END_FOR
		
		IF MainCommands.Disable THEN
			MainCommands.Enable		:= FALSE;
			MainState				:= MS_DISABLED;
		ELSIF MainCommands.Stop THEN
			MainCommands.Stop		:= FALSE;
			MainCommands.Disable	:= TRUE;
			MainCommands.Start		:= FALSE;
			MainState				:= MS_DISABLED;
		ELSIF MainCommands.Enable THEN
        	MainState 				:= MS_ONESHOT_ENABLE;
		END_IF

	MS_ONESHOT_ENABLE:	// -------------------------------------------------- SINGLE-CYCLE ISSUE ENABLE COMMANDS

		FOR i := 0 TO GVL.NUM_MOVERS - 1 DO
			Mover[i].Enable();
		END_FOR

		MainState		:= MS_ENABLING_MOVERS;
	
    MS_ENABLING_MOVERS: // -------------------------------------------------- RESETTING AND ENABLING AXES

        allMoversEnabled := TRUE; // default ...

        FOR i := 0 TO GVL.NUM_MOVERS - 1 DO
            IF Mover[i].Ready = FALSE THEN
                allMoversEnabled 		:= FALSE;
            END_IF
        END_FOR

        IF allMoversEnabled THEN
			IF MainCommands.Disable THEN
				MainCommands.Enable		:=FALSE;
            	MainState				:= MS_ONESHOT_DISABLE;
			ELSIF MainCommands.Stop	 THEN
				MainCommands.Start		:=FALSE;
				MainState				:= MS_ONESHOT_STOP;
			ELSIF MainCommands.Enable THEN
	        	MainState 				:= MS_INITIALIZING_OBJECTIVES;
			END_IF
        END_IF

    MS_INITIALIZING_OBJECTIVES: // --------------------------------------------- WRITING OBJECTIVE PARAMETERS

        // Initialize station positions
        Station[0].TrackPosition := 5;
        Station[1].TrackPosition := 750;
        Station[2].TrackPosition := 1200;
        Station[3].TrackPosition := 1300;
        Station[4].TrackPosition := 1400;

        PositionTrigger[0].TrackPosition := 1500;
        PositionTrigger[1].TrackPosition := 2000;
        PositionTrigger[2].TrackPosition := 3500;
        PositionTrigger[3].TrackPosition := 4000;

        SpeedTrigger[0].ThresholdVelocity := 2000;

        Zone[0].StartPosition := 3750;
        Zone[0].EndPosition   := 750;

        Zone[1].StartPosition := 750;
        Zone[1].EndPosition   := 1750;

        Zone[2].StartPosition := 1750;
        Zone[2].EndPosition   := 2750;

        Zone[3].StartPosition := 2750;
        Zone[3].EndPosition   := 3750;

        MainState := MS_ENABLED;

    MS_ENABLED: // ------------------------------------------------------------- MOVERS ENABLED, STOPPED

		MainCommands.Stop	:= FALSE;
	
        IF MainCommands.Start THEN

            // ===== RECOVERY LOGIC =====

            (*
			Recovery is typically very application-specific. Each implementation will need to determine
			what to do with work-in-progres, rejects, movers with unknown product status, etc.s
			*)

            // Register all movers with all Zones, for recovery
            FOR i := 0 TO GVL.NUM_MOVERS - 1 DO
                Zone[0].RegisterMover( Mover[i] );
                Zone[1].RegisterMover( Mover[i] );
                Zone[2].RegisterMover( Mover[i] );
                Zone[3].RegisterMover( Mover[i] );
				
				PositionTrigger[0].RegisterMover( Mover[i] );
				PositionTrigger[1].RegisterMover( Mover[i] );
				
				Mover[i].MoveVelocity( 500 );
            END_FOR
			
			(*
            Zone[0].CurrentMoverList.SetAllVelocity(800).MoveAllToStation(Station[0]);
            Zone[1].CurrentMoverList.SetAllVelocity(600).MoveAllToStation(Station[0]);
            Zone[2].CurrentMoverList.SetAllVelocity(400).MoveAllToStation(Station[0]);
            Zone[3].CurrentMoverList.SetAllVelocity(200).MoveAllToStation(Station[0]);
			*)
			
			

            // ===== END =====

            MainState			:= MS_RUN;

        ELSIF MainCommands.Disable THEN
            MainCommands.Enable := FALSE;
            MainState           := MS_ONESHOT_STOP;
        END_IF

    MS_RUN: // --------------------------------------------------------------- OPERATING
	
	
	
		IF PositionTrigger[0].MoverPassedPosition THEN
			PositionTrigger[0].CurrentMover.MoveVelocity( 200 );
			PositionTrigger[0].MuteCurrent();
		END_IF
		
		IF PositionTrigger[1].MoverPassedPosition THEN
			PositionTrigger[1].CurrentMover.MoveVelocity( 500 );
			PositionTrigger[1].MuteCurrent();
		END_IF
		
		
		
		

        IF MainCommands.Stop THEN
            MainCommands.Start 	:= FALSE;
            MainState         	:= MS_ONESHOT_STOP;
        ELSIF MainCommands.Disable THEN
            MainCommands.Enable := FALSE;
            MainState           := MS_ONESHOT_STOP;
        END_IF
		
	MS_ONESHOT_STOP:	// --------------------------------------------------- SINGLE-CYCLE ISSUE HALT COMMANDS
	
		FOR i := 0 TO GVL.NUM_MOVERS - 1 DO
			Mover[i].Halt();
		END_FOR
	
		MainState					:= MS_STOPPING;
	
    MS_STOPPING: // ---------------------------------------------------------- STOPPING MOVERS

		// Stop all movers
		allMoversHalted				:= TRUE;
		FOR i := 0 TO GVL.NUM_MOVERS - 1 DO
			Mover[i].AxisReference.ReadStatus();
			IF Mover[i].AxisReference.Status.Moving THEN
				allMoversHalted		:= FALSE;
			END_IF
		END_FOR
		
		MainCommands.Start			:= FALSE;
 
		IF allMoversHalted THEN
           	MainState 				:= MS_STOPPED;
		END_IF
        

    MS_STOPPED: // ------------------------------------------------------------ Stop Command has been sent, hold here

        IF MainCommands.Disable THEN
            MainCommands.Enable 	:= FALSE;
			MainCommands.Start		:= FALSE;
            MainState           	:= MS_ONESHOT_DISABLE;
        ELSIF MainCommands.Start THEN
            MainCommands.Stop 		:= FALSE;
            MainState         		:= MS_ENABLING_MOVERS;
        END_IF

	    // Reinit nextStation
        nextStation := 4;

        // Unregister everything from all stations
        FOR i := 0 TO GVL.NUM_STATIONS - 1 DO
            Station[i].UnregisterAll();
        END_FOR

        // Unregister everything from all Pos Trigs
        FOR i := 0 TO SIZEOF(PositionTrigger) / SIZEOF(PositionTrigger[0]) - 1 DO
            PositionTrigger[i].UnregisterAll();
        END_FOR

        // Unregister everything from all speed trigs
        FOR i := 0 TO SIZEOF(SpeedTrigger) / SIZEOF(SpeedTrigger[0]) - 1 DO
            SpeedTrigger[i].UnregisterAll();
        END_FOR

        // Unregister everything from all zones
        FOR i := 0 TO SIZEOF(Zone) / SIZEOF(Zone[0]) - 1 DO
            Zone[i].UnregisterAll();
        END_FOR
	
	MS_ONESHOT_DISABLE:	// ------------------------------------------------------- SINGLE CYCLE ISSUE DISABLE COMMANDS
	
		FOR i := 0 TO GVL.NUM_MOVERS DO
			Mover[i].Disable();
		END_FOR

		MainState					:=	MS_DISABLING;
	
    MS_DISABLING: // --------------------------------------------------- DISABLING MOVERS

        // Reinit nextStation
        nextStation := 4;

        // Unregister everything from all stations
        FOR i := 0 TO GVL.NUM_STATIONS - 1 DO
            Station[i].UnregisterAll();
        END_FOR

        // Unregister everything from all Position triggers
        FOR i := 0 TO SIZEOF(PositionTrigger) / SIZEOF(PositionTrigger[0]) - 1 DO
            PositionTrigger[i].UnregisterAll();
        END_FOR

        // Unregister everything from all speed triggers
        FOR i := 0 TO SIZEOF(SpeedTrigger) / SIZEOF(SpeedTrigger[0]) - 1 DO
            SpeedTrigger[i].UnregisterAll();
        END_FOR

        // Unregister everything from all zones
        FOR i := 0 TO SIZEOF(Zone) / SIZEOF(Zone[0]) - 1 DO
            Zone[i].UnregisterAll();
        END_FOR
		
		allMoversDisabled				:= TRUE;
		
		FOR i := 0 TO gvl.NUM_MOVERS-1 DO
			IF NOT Mover[i].AxisReference.Status.Disabled THEN 
				allMoversDisabled		:= FALSE;
			END_IF
		END_FOR
 
        IF allMoversDisabled THEN
            MainState					:= MS_DISABLED;
        END_IF

    MS_ERROR: // --------------------------------------------------- ERRORSTATE

    MS_DEBUG: // ------------------------------------------------------- DEV USE ONLY

END_CASE;

// Call all mover function blocks cyclically
FOR i := 0 TO GVL.NUM_MOVERS - 1 DO
    Mover[i].Cyclic(GroupRef);
	Mover[i].AxisReference.ReadStatus();
END_FOR;

// Call all station function blocks cyclically
FOR i := 0 TO GVL.NUM_STATIONS - 1 DO
    Station[i].Cyclic();
END_FOR

// Call trigger function blocks cyclically
PositionTrigger[0].Cyclic();
PositionTrigger[1].Cyclic();
PositionTrigger[2].Cyclic();
]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>