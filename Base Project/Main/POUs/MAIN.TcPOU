<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="MAIN" Id="{0790caa7-8a3f-4f91-b0f8-9ebb3db3858d}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
	

	// helper, state, index variables
	i						: UINT;
	n						: UINT;
	MainState				: MainState_enum;
	MainCommands			: MainCommands_typ;
	
	StationTimer			: ARRAY [0..GVL.NUM_STATIONS] OF TON;
	nextStation				: USINT := 2;
	
	lowVelocity				: LREAL := 200; // mm/s
	mediumVelocity			: LREAL := 800;	// mm/s
	highVelocity			: LREAL := 2000; // mm/s
	
	// linked NC handles
	GroupRef				: AXES_GROUP_REF;
	Mover					: ARRAY [0..GVL.NUM_MOVERS-1] OF Mover;
	
	MoverList				: MoverList;
	
	ParameterSet			: MoverParameters_typ;
	
	// Objectives & Parameters
	
	// Todo initialize this in the code with the prop Setter, not by addressing an internal variable
		
	Station					: ARRAY [0..GVL.NUM_STATIONS-1] OF Station;		
	PositionTrigger			: ARRAY [0..1] OF PositionTrigger;		
	SpeedTrigger			: ARRAY [0..0] OF SpeedTrigger;
	Zone					: ARRAY [0..3] OF Zone;	
	
	allMoversEnabled: BOOL;;
END_VAR

VAR_INPUT
	nGoalVelocity: INT;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[


CASE MainState OF
	MS_DISABLED:	// ------------------------------------------------------- IDLE STATE
	
	
		IF MainCommands.Enable THEN
			MainState		:= MS_INITIALIZING_MOVERS;
		END_IF
	
		
	MS_INITIALIZING_MOVERS: 	// --------------------------------------- SET MOVER MOTION PARAMETERS
	
	
		FOR i := 0 TO GVL.NUM_MOVERS-1 DO
			ParameterSet.Jerk					:= 1E5;		// mm/s3
			ParameterSet.Acceleration			:= 1E4;		// mm/s2
			ParameterSet.Deceleration			:= 1E4;		// mm/s2
			ParameterSet.Velocity				:= 1E3;		// mm/s
			ParameterSet.Direction				:= mcDirectionPositive;

			Mover[i].MotionParameters			:= ParameterSet;
		END_FOR
		
		MainState			:= MS_ENABLING_MOVERS;	
		
	
	MS_ENABLING_MOVERS:	// ----------------------------------------------- RESETTING AND ENABLING AXES
	
	
		allMoversEnabled		:= TRUE; // default ...
		
		FOR i := 0 TO GVL.NUM_MOVERS - 1 DO
			Mover[i].Enable		:= TRUE;
			
			IF Mover[i].Ready = FALSE THEN
				allMoversEnabled	:= FALSE;
			END_IF
		END_FOR
		
		IF allMoversEnabled THEN
			MainState		:= MS_INITIALIZING_OBJECTIVES;
		END_IF		
		
	
	MS_INITIALIZING_OBJECTIVES:	// --------------------------------------- WRITING OBJECTIVE PARAMETERS
	
		
		Station[0].TrackPosition			:= 0;
		Station[1].TrackPosition			:= 1500;
		
		
		PositionTrigger[0].TrackPosition	:= 500;
		PositionTrigger[0].TriggerDirection	:= mcDirectionPositive;
		
		PositionTrigger[1].TrackPosition	:= 1000;
		PositionTrigger[1].TriggerDirection := mcDirectionPositive;
		
		SpeedTrigger[0].ThresholdVelocity	:= 1900;
		
		Zone[0].StartPosition				:= 3750;
		Zone[0].EndPosition					:= 750;
		
		Zone[1].StartPosition				:= 750;
		Zone[1].EndPosition					:= 1750;
		
		Zone[2].StartPosition				:= 1750;
		Zone[2].EndPosition					:= 2750;
		
		Zone[3].StartPosition				:= 2750;
		Zone[3].EndPosition					:= 3750;
					
		MainState		:= MS_ENABLED;
		
	MS_ENABLED:	// ------------------------------------------------------- MOVERS ENABLED, STOPPED
	
		IF MainCommands.Start THEN
			
			// ===== RECOVERY LOGIC =====
		
			FOR i := 0 TO GVL.NUM_MOVERS - 1 DO				
				Zone[0].RegisterMover( Mover[i] );
				Zone[1].RegisterMover( Mover[i] );
				Zone[2].RegisterMover( Mover[i] );
				Zone[3].RegisterMover( Mover[i] );			
			END_FOR
			
			Zone[0].GetMoverList().MoveAllToStation( Station[0] );
			Zone[1].GetMoverList().MoveAllToStation( Station[0] );
			
			Zone[2].GetMoverList().MoveAllToStation( Station[0] );
			Zone[3].GetMoverList().MoveAllToStation( Station[0] );
		
			// ===== END =====
		
			MainState	:= MS_RUN;
			
		ELSIF MainCommands.Disable THEN
			MainState	:= MS_DISABLING;
		END_IF
	
	MS_RUN: 	// ------------------------------------------------------- OPERATING
	
	
	

		
		
		// Station 0 Logic
		IF Station[0].MoverInPosition THEN
			StationTimer[0]( IN := TRUE, PT := T#250MS );
			
			IF StationTimer[0].Q THEN
				Station[0].CurrentMover.SetAcceleration(( nGoalVelocity-Station[0].CurrentMover.AxisReference.NcToPlc.ActVelo)/((2*(PositionTrigger[0].TrackPosition - Station[0].TrackPosition))/(Station[0].CurrentMover.AxisReference.NcToPlc.ActVelo+nGoalVelocity)));
				PositionTrigger[0].RegisterMover( Station[0].CurrentMover );
				Station[0].CurrentMover.movevelocity( nGoalVelocity);
			END_IF
		ELSE
			StationTimer[0]( IN := FALSE );
		END_IF
		
		
		
				
		
		
		
		
		// Station 1 & 2 Logic
		IF Station[1].MoverInPosition AND Station[2].MoverInPosition THEN
			StationTimer[1]( IN := TRUE, PT := T#500MS );
			
			MoverList.RegisterMover( Station[1].CurrentMover );
			MoverList.RegisterMover( Station[2].CurrentMover );

			IF StationTimer[1].Q THEN
				
				PositionTrigger[0].RegisterMover( Station[1].CurrentMover );
				PositionTrigger[0].RegisterMover( Station[2].CurrentMover );
				
				MoverList.SetAllVelocity( mediumVelocity );
				MoverList.MoveAllToStation( Station[3] );

				MoverList.UnregisterAll();				
			END_IF
		ELSE
			StationTimer[1]( IN := FALSE );
		END_IF
		
		
		
		
		
		
		// Position Trigger 0 Logic
		IF PositionTrigger[0].MoverPassedPosition THEN
			PositionTrigger[1].RegisterMover( PositionTrigger[0].CurrentMover );	
		
			PositionTrigger[0].CurrentMover.SetVelocity( lowVelocity );
			PositionTrigger[0].CurrentMover.MoveToStation( Station[3] );			
			
			PositionTrigger[0].UnregisterCurrent();
		END_IF
		
		
		
		
		
		
		// Position Trigger 1 Logic
		IF PositionTrigger[1].MoverPassedPosition THEN
			SpeedTrigger[0].RegisterMover( PositionTrigger[1].CurrentMover );		
			
			PositionTrigger[1].CurrentMover.SetVelocity( highVelocity );
			PositionTrigger[1].CurrentMover.MoveToStation( Station[3] );
			
			PositionTrigger[1].UnregisterCurrent();
		END_IF
		
		
		
		
		
		
		// Speed Trigger 0 Logic
		IF SpeedTrigger[0].MoverInVelocity THEN
			
			SpeedTrigger[0].CurrentMover.SetVelocity( mediumVelocity );
			SpeedTrigger[0].CurrentMover.MoveToStation( Station[3] );
			
			SpeedTrigger[0].UnregisterCurrent();
		END_IF
		
		
		
		
		
		
		// Station 3 Logic
		IF Station[3].MoverInPosition THEN
			StationTimer[3]( IN := TRUE, PT := T#250MS );
			
			IF StationTimer[3].Q THEN
				Station[3].CurrentMover.MoveToStation( Station[0] );
			END_IF
		ELSE
			StationTimer[3]( IN := FALSE );
		END_IF
		
		
		
		
		
		IF MainCommands.Stop THEN
			MainState		:= MS_STOPPING;
		ELSIF MainCommands.Disable THEN
			MainState		:= MS_STOPPING;
		END_IF
	
	MS_STOPPING:	// --------------------------------------------------- STOPPING MOVERS
	
		Mover[0].GroupStop();
		// todo needs confirmation that all movers have stopped
		
		// todo needs to deregister all objectives
		
		MainState		:= MS_ENABLED;
		
		IF MainCommands.Disable THEN
			MainState	:= MS_DISABLING;
		ELSE
			MainState	:= MS_ENABLED;
		END_IF
	
	MS_DISABLING:	// --------------------------------------------------- DISABLING MOVERS
	
		FOR i := 0 TO GVL.NUM_MOVERS - 1 DO
			
			Mover[i].Enable	:=  FALSE;
		
		END_FOR
		
		IF (* all movers are disabled *) TRUE THEN
			
			MainState		:= MS_DISABLED;
		
		END_IF
	
	MS_ERROR:		// --------------------------------------------------- ERRORSTATE
	
	MS_DEBUG:	// ------------------------------------------------------- DEV USE ONLY
		
END_CASE;





// Call all mover function blocks cyclically
FOR i := 0 TO GVL.NUM_MOVERS-1 DO
	Mover[i].Cyclic( GroupRef );
END_FOR;

// Call all station function blocks cyclically
FOR i := 0 TO GVL.NUM_STATIONS-1 DO
	Station[i].Cyclic();
END_FOR

// Call trigger function blocks cyclically
PositionTrigger[0].Cyclic();
PositionTrigger[1].Cyclic();

]]></ST>
    </Implementation>
    <LineIds Name="MAIN">
      <LineId Id="3502" Count="1" />
      <LineId Id="710" Count="0" />
      <LineId Id="1457" Count="0" />
      <LineId Id="3522" Count="0" />
      <LineId Id="3552" Count="0" />
      <LineId Id="3599" Count="0" />
      <LineId Id="3553" Count="1" />
      <LineId Id="3548" Count="0" />
      <LineId Id="3527" Count="0" />
      <LineId Id="3600" Count="0" />
      <LineId Id="3528" Count="0" />
      <LineId Id="3584" Count="0" />
      <LineId Id="3601" Count="0" />
      <LineId Id="3586" Count="0" />
      <LineId Id="3588" Count="2" />
      <LineId Id="3598" Count="0" />
      <LineId Id="3591" Count="0" />
      <LineId Id="3593" Count="3" />
      <LineId Id="3585" Count="0" />
      <LineId Id="3602" Count="0" />
      <LineId Id="3529" Count="0" />
      <LineId Id="3531" Count="0" />
      <LineId Id="3570" Count="0" />
      <LineId Id="3603" Count="0" />
      <LineId Id="3572" Count="11" />
      <LineId Id="3571" Count="0" />
      <LineId Id="3605" Count="0" />
      <LineId Id="3532" Count="1" />
      <LineId Id="3606" Count="0" />
      <LineId Id="3609" Count="0" />
      <LineId Id="3634" Count="0" />
      <LineId Id="3610" Count="23" />
      <LineId Id="3607" Count="0" />
      <LineId Id="3636" Count="3" />
      <LineId Id="3650" Count="0" />
      <LineId Id="3666" Count="1" />
      <LineId Id="3655" Count="10" />
      <LineId Id="3651" Count="3" />
      <LineId Id="3648" Count="1" />
      <LineId Id="3643" Count="1" />
      <LineId Id="3642" Count="0" />
      <LineId Id="3534" Count="1" />
      <LineId Id="3669" Count="0" />
      <LineId Id="3671" Count="22" />
      <LineId Id="3831" Count="2" />
      <LineId Id="3835" Count="1" />
      <LineId Id="3694" Count="21" />
      <LineId Id="3837" Count="2" />
      <LineId Id="3716" Count="12" />
      <LineId Id="3840" Count="3" />
      <LineId Id="3729" Count="10" />
      <LineId Id="3844" Count="3" />
      <LineId Id="3740" Count="10" />
      <LineId Id="3848" Count="3" />
      <LineId Id="3751" Count="9" />
      <LineId Id="3852" Count="3" />
      <LineId Id="3761" Count="0" />
      <LineId Id="3670" Count="0" />
      <LineId Id="3762" Count="0" />
      <LineId Id="3764" Count="1" />
      <LineId Id="3763" Count="0" />
      <LineId Id="3536" Count="1" />
      <LineId Id="3766" Count="2" />
      <LineId Id="3771" Count="0" />
      <LineId Id="3779" Count="0" />
      <LineId Id="3778" Count="0" />
      <LineId Id="3770" Count="0" />
      <LineId Id="3772" Count="2" />
      <LineId Id="3776" Count="1" />
      <LineId Id="3775" Count="0" />
      <LineId Id="3540" Count="1" />
      <LineId Id="3780" Count="2" />
      <LineId Id="3784" Count="1" />
      <LineId Id="3783" Count="0" />
      <LineId Id="3786" Count="2" />
      <LineId Id="3791" Count="1" />
      <LineId Id="3789" Count="0" />
      <LineId Id="3542" Count="3" />
      <LineId Id="2547" Count="0" />
      <LineId Id="2546" Count="0" />
      <LineId Id="763" Count="1" />
      <LineId Id="3793" Count="1" />
      <LineId Id="765" Count="2" />
      <LineId Id="2548" Count="0" />
      <LineId Id="878" Count="1" />
      <LineId Id="881" Count="1" />
      <LineId Id="2549" Count="0" />
      <LineId Id="2538" Count="1" />
      <LineId Id="2542" Count="0" />
      <LineId Id="2544" Count="0" />
      <LineId Id="2543" Count="0" />
      <LineId Id="592" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>