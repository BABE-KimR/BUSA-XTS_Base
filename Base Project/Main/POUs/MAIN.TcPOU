<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="MAIN" Id="{0790caa7-8a3f-4f91-b0f8-9ebb3db3858d}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR

    // ========= Example Application Variables =========

    nextStation : USINT := 4;

    lowVelocity    : LREAL := 200;  // mm/s
    mediumVelocity : LREAL := 800;  // mm/s
    highVelocity   : LREAL := 2000; // mm/s

    // ========= Helper, State, & Index Variables =========

    i                : UINT; // index variable; gets reused in various FOR loops
    n                : UINT; // secondary index variable, for enabling movers
    allMoversEnabled : BOOL; // helper flag for verifying enable status of all movers

    StationTimer : ARRAY[0..GVL.NUM_STATIONS] OF TON; // timer blocks, for station dwells

    MainState    : MainState_enum;   // enumeration for the Main state machine
    MainCommands : MainCommands_typ; // command struct for cycling thru the state machine

    // ========= Linked NC Variables & References =========

    GroupRef : AXES_GROUP_REF;                        // linked to the Collision Avoidance group and passed cyclically to every Mover object
    Mover    : ARRAY[0..GVL.NUM_MOVERS - 1] OF Mover; // instantiation of Mover objects. Matches the number of movers on the system

    // ========= Objectives & Parameters =========

    MoverList    : MoverList;
    ParameterSet : MotionParameters_typ;

    Station         : ARRAY[0..GVL.NUM_STATIONS - 1] OF Station;
    PositionTrigger : ARRAY[0..3] OF PositionTrigger;
    SpeedTrigger    : ARRAY[0..1] OF SpeedTrigger;
    Zone            : ARRAY[0..3] OF Zone;

	MoversHalted: BOOL;
	AllMoversDisabled: BOOL;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[CASE MainState OF
    MS_DISABLED: // ------------------------------------------------------- IDLE STATE

        MainCommands.Start	:= FALSE;
		MainCommands.Stop	:= FALSE;
		
        IF MainCommands.Enable THEN
            MainCommands.Disable := FALSE;
            MainState            := MS_INITIALIZING_MOVERS;
        END_IF

    MS_INITIALIZING_MOVERS: // --------------------------------------- SET MOVER MOTION PARAMETERS

        FOR i := 0 TO GVL.NUM_MOVERS - 1 DO
            ParameterSet.Jerk         := 1E5; // mm/s3
            ParameterSet.Acceleration := 1E4; // mm/s2
            ParameterSet.Deceleration := 1E4; // mm/s2
            ParameterSet.Velocity     := 1E3; // mm/s
            ParameterSet.Direction    := mcDirectionPositive;

            Mover[i].MotionParameters := ParameterSet;
        END_FOR
		
		IF MainCommands.Disable THEN
			MainCommands.Enable		:=FALSE;
			MainState:= MS_Disabled;
		ELSIF MainCommands.Stop THEN
			MainCommands.Stop		:=FALSE;
			MainCommands.Disable	:=TRUE;
			MainCommands.Start		:=FALSE;
			MainState	:= MS_Disabled;
		ELSIF MainCommands.Enable THEN
        	MainState 	:= MS_ENABLING_MOVERS;
		END_IF

    MS_ENABLING_MOVERS: // ----------------------------------------------- RESETTING AND ENABLING AXES

        allMoversEnabled := TRUE; // default ...

        FOR i := 0 TO GVL.NUM_MOVERS - 1 DO
            Mover[i].Enable();

            IF Mover[i].Ready = FALSE THEN
                allMoversEnabled := FALSE;
            END_IF
        END_FOR

        IF allMoversEnabled THEN

			IF MainCommands.Disable THEN
				MainCommands.Enable		:=FALSE;

				FOR i := 0 TO GVL.NUM_MOVERS - 1 DO
					Mover[i].Disable();
				END_FOR

            	MainState	:= MS_DISABLING;
			ELSIF MainCommands.Stop	 THEN
				MainCommands.Start		:=FALSE;
				MainState	:= MS_STOPPING;
			ELSIF MainCommands.Enable THEN
	        	MainState 	:= MS_INITIALIZING_OBJECTIVES;
			END_IF
        END_IF

    MS_INITIALIZING_OBJECTIVES: // --------------------------------------- WRITING OBJECTIVE PARAMETERS

        // Initialize station positions
        Station[0].TrackPosition := 0;
        Station[1].TrackPosition := 750;
        Station[2].TrackPosition := 1200;
        Station[3].TrackPosition := 1300;
        Station[4].TrackPosition := 1400;

        PositionTrigger[0].TrackPosition := 1500;
        PositionTrigger[1].TrackPosition := 2000;
        PositionTrigger[2].TrackPosition := 3500;
        PositionTrigger[3].TrackPosition := 4000;

        SpeedTrigger[0].ThresholdVelocity := 2000;

        Zone[0].StartPosition := 3750;
        Zone[0].EndPosition   := 750;

        Zone[1].StartPosition := 750;
        Zone[1].EndPosition   := 1750;

        Zone[2].StartPosition := 1750;
        Zone[2].EndPosition   := 2750;

        Zone[3].StartPosition := 2750;
        Zone[3].EndPosition   := 3750;

        MainState := MS_ENABLED;

    MS_ENABLED: // ------------------------------------------------------- MOVERS ENABLED, STOPPED

        IF MainCommands.Start THEN

            // ===== RECOVERY LOGIC =====

            (*
			Recovery is typically very application-specific. Each implementation will need to determine
			what to do with work-in-progres, rejects, movers with unknown product status, etc.s
			*)

            // Register all movers with all Zones, for recovery
            FOR i := 0 TO GVL.NUM_MOVERS - 1 DO
                Zone[0].RegisterMover( Mover[i] );
                Zone[1].RegisterMover( Mover[i] );
                Zone[2].RegisterMover( Mover[i] );
                Zone[3].RegisterMover( Mover[i] );
            END_FOR

            Zone[0].CurrentMoverList.SetAllVelocity(800).MoveAllToStation(Station[0]);
            Zone[1].CurrentMoverList.SetAllVelocity(600).MoveAllToStation(Station[0]);
            Zone[2].CurrentMoverList.SetAllVelocity(400).MoveAllToStation(Station[0]);
            Zone[3].CurrentMoverList.SetAllVelocity(200).MoveAllToStation(Station[0]);

            // ===== END =====

			MainCommands.Stop	:= FALSE;
            MainState			:= MS_RUN;

        ELSIF MainCommands.Disable OR MainCommands.Stop THEN
            MainCommands.Enable := FALSE;
            MainState           := MS_STOPPING;
        END_IF

    MS_RUN: // ------------------------------------------------------- OPERATING
	
        // Station 0 Logic
        IF Station[0].MoverInPosition THEN
            StationTimer[0](IN := TRUE, PT := T#1000MS);

            IF StationTimer[0].Q THEN
                Station[0].CurrentMover.SetVelocity(mediumVelocity);
                Station[0].CurrentMover.MoveToStation(Station[1]);

            END_IF
        ELSE
            StationTimer[0](IN := FALSE);
        END_IF

        // Station 1 Logic		
        IF Station[1].MoverInPosition THEN
            StationTimer[1](IN := TRUE, PT := T#250MS);

            IF StationTimer[1].Q THEN
                Station[1].CurrentMover.SetVelocity(mediumVelocity);
                Station[1].CurrentMover.MoveToStation(Station[nextStation]);
                nextStation := nextStation - 1;

                IF nextStation = 1 THEN
                    nextStation := 4;
                END_IF
            END_IF
        ELSE
            StationTimer[1](IN := FALSE);
        END_IF

        IF Station[2].MoverInPosition AND Station[3].MoverInPosition AND Station[4].MoverInPosition THEN
            StationTimer[2](IN := TRUE, PT := T#750MS);

            IF StationTimer[2].Q THEN
                PositionTrigger[0].RegisterMover(Station[2].CurrentMover);
                PositionTrigger[0].RegisterMover(Station[3].CurrentMover);
                PositionTrigger[0].RegisterMover(Station[4].CurrentMover);

                Station[2].CurrentMover.MoveVelocity(500);
                Station[3].CurrentMover.MoveVelocity(500);
                Station[4].CurrentMover.MoveVelocity(500);
            END_IF
        END_IF

        // Position Trigger 0 Logic
        IF PositionTrigger[0].MoverPassedPosition THEN
            PositionTrigger[1].RegisterMover(PositionTrigger[0].CurrentMover);

            PositionTrigger[0].CurrentMover.SetVelocity(lowVelocity);

            PositionTrigger[0].UnregisterCurrent();
        END_IF

        // Position Trigger 1 Logic
        IF PositionTrigger[1].MoverPassedPosition THEN
            SpeedTrigger[0].RegisterMover(PositionTrigger[1].CurrentMover);

            PositionTrigger[1].CurrentMover.SetVelocity(highVelocity);

            PositionTrigger[1].UnregisterCurrent();
        END_IF

        IF SpeedTrigger[0].MoverInVelocity THEN
            SpeedTrigger[0].CurrentMover.SetVelocity(mediumVelocity);
            PositionTrigger[2].RegisterMover(SpeedTrigger[0].CurrentMover);
            SpeedTrigger[0].UnregisterCurrent();
        END_IF

        IF PositionTrigger[2].MoverPassedPosition THEN

            PositionTrigger[2].CurrentMover.SetVelocity(lowVelocity);
            PositionTrigger[2].CurrentMover.MoveToStation(Station[0]);

            PositionTrigger[2].UnregisterCurrent();
        END_IF

        IF MainCommands.Stop THEN
            MainCommands.Start := FALSE;
            MainState          := MS_STOPPING;
        ELSIF MainCommands.Disable THEN
            MainCommands.Enable := FALSE;
            MainState           := MS_STOPPING;
        END_IF

    MS_STOPPING: // --------------------------------------------------- STOPPING MOVERS

		// Stop all movers
		MoversHalted:=TRUE;
		FOR i := 0 TO GVL.NUM_MOVERS - 1 DO
			Mover[i].Halt();
			Mover[i].AxisReference.ReadStatus();
			IF Mover[i].AxisReference.Status.Moving THEN
				MoversHalted:=FALSE;
			END_IF
		END_FOR
		
		

		MainCommands.Start	:= FALSE;
 
		IF MoversHalted THEN
           	MainState := MS_STOPPED;
		END_IF
        

    MS_STOPPED: // --------------------------------------------------- Stop Command has been sent, hold here

        IF MainCommands.Disable THEN
            MainCommands.Enable := FALSE;
			MainCommands.Start:=FALSE;
			FOR i := 0 TO GVL.NUM_MOVERS - 1 DO
				Mover[i].Disable();
			END_FOR
            MainState           := MS_DISABLING;
        ELSIF MainCommands.Start THEN
            MainCommands.Stop := FALSE;
            MainState         := MS_ENABLING_MOVERS;
        END_IF

		// For this sample, recovering from a stop is like booting fresh. Another option would be a Reissuing Commands state from which we could resume. 
	    // Reinit nextStation
        nextStation := 4;

        // Unregister everything from all stations
        FOR i := 0 TO GVL.NUM_STATIONS - 1 DO
            Station[i].UnregisterAll();
        END_FOR

        // Unregister everything from all Pos Trigs
        FOR i := 0 TO SIZEOF(PositionTrigger) / SIZEOF(PositionTrigger[0]) - 1 DO
            PositionTrigger[i].UnregisterAll();
        END_FOR

        // Unregister everything from all speed trigs
        FOR i := 0 TO SIZEOF(SpeedTrigger) / SIZEOF(SpeedTrigger[0]) - 1 DO
            SpeedTrigger[i].UnregisterAll();
        END_FOR

        // Unregister everything from all zones
        FOR i := 0 TO SIZEOF(Zone) / SIZEOF(Zone[0]) - 1 DO
            Zone[i].UnregisterAll();
        END_FOR
		

    MS_DISABLING: // --------------------------------------------------- DISABLING MOVERS

        // Reinit nextStation
        nextStation := 4;

        // Unregister everything from all stations
        FOR i := 0 TO GVL.NUM_STATIONS - 1 DO
            Station[i].UnregisterAll();
        END_FOR

        // Unregister everything from all Pos Trigs
        FOR i := 0 TO SIZEOF(PositionTrigger) / SIZEOF(PositionTrigger[0]) - 1 DO
            PositionTrigger[i].UnregisterAll();
        END_FOR

        // Unregister everything from all speed trigs
        FOR i := 0 TO SIZEOF(SpeedTrigger) / SIZEOF(SpeedTrigger[0]) - 1 DO
            SpeedTrigger[i].UnregisterAll();
        END_FOR

        // Unregister everything from all zones
        FOR i := 0 TO SIZEOF(Zone) / SIZEOF(Zone[0]) - 1 DO
            Zone[i].UnregisterAll();
        END_FOR
		
		AllMoversDisabled:=TRUE;
		
		FOR i := 0 TO gvl.NUM_MOVERS-1 DO
			IF NOT Mover[i].AxisReference.Status.Disabled THEN 
				AllMoversDisabled:= FALSE;
			END_IF
		END_FOR
 
        IF AllMoversDisabled THEN
            MainState := MS_DISABLED;
        END_IF

    MS_ERROR: // --------------------------------------------------- ERRORSTATE

    MS_DEBUG: // ------------------------------------------------------- DEV USE ONLY

END_CASE;

// Call all mover function blocks cyclically
FOR i := 0 TO GVL.NUM_MOVERS - 1 DO
    Mover[i].Cyclic(GroupRef);
	Mover[i].AxisReference.ReadStatus();
END_FOR;

// Call all station function blocks cyclically
FOR i := 0 TO GVL.NUM_STATIONS - 1 DO
    Station[i].Cyclic();
END_FOR

// Call trigger function blocks cyclically
PositionTrigger[0].Cyclic();
PositionTrigger[1].Cyclic();
PositionTrigger[2].Cyclic();]]></ST>
    </Implementation>
    <LineIds Name="MAIN">
      <LineId Id="5896" Count="4" />
      <LineId Id="6290" Count="0" />
      <LineId Id="5901" Count="16" />
      <LineId Id="6291" Count="0" />
      <LineId Id="6294" Count="0" />
      <LineId Id="6508" Count="0" />
      <LineId Id="6295" Count="0" />
      <LineId Id="6297" Count="0" />
      <LineId Id="6296" Count="0" />
      <LineId Id="6298" Count="2" />
      <LineId Id="5918" Count="1" />
      <LineId Id="6301" Count="0" />
      <LineId Id="5920" Count="12" />
      <LineId Id="6322" Count="0" />
      <LineId Id="6303" Count="0" />
      <LineId Id="6318" Count="0" />
      <LineId Id="6323" Count="0" />
      <LineId Id="6321" Count="0" />
      <LineId Id="6319" Count="1" />
      <LineId Id="6324" Count="0" />
      <LineId Id="6304" Count="0" />
      <LineId Id="6306" Count="0" />
      <LineId Id="6309" Count="4" />
      <LineId Id="5934" Count="56" />
      <LineId Id="6203" Count="0" />
      <LineId Id="5991" Count="8" />
      <LineId Id="6252" Count="0" />
      <LineId Id="6001" Count="84" />
      <LineId Id="6195" Count="0" />
      <LineId Id="6086" Count="0" />
      <LineId Id="6197" Count="0" />
      <LineId Id="6386" Count="0" />
      <LineId Id="6198" Count="0" />
      <LineId Id="6388" Count="3" />
      <LineId Id="6199" Count="0" />
      <LineId Id="6384" Count="1" />
      <LineId Id="6091" Count="0" />
      <LineId Id="6509" Count="0" />
      <LineId Id="6094" Count="0" />
      <LineId Id="6392" Count="0" />
      <LineId Id="6395" Count="0" />
      <LineId Id="6394" Count="0" />
      <LineId Id="6097" Count="5" />
      <LineId Id="6549" Count="0" />
      <LineId Id="6241" Count="2" />
      <LineId Id="6103" Count="4" />
      <LineId Id="6417" Count="1" />
      <LineId Id="6396" Count="20" />
      <LineId Id="6382" Count="1" />
      <LineId Id="6108" Count="25" />
      <LineId Id="6423" Count="0" />
      <LineId Id="6421" Count="1" />
      <LineId Id="6425" Count="0" />
      <LineId Id="6427" Count="1" />
      <LineId Id="6426" Count="0" />
      <LineId Id="6424" Count="0" />
      <LineId Id="6134" Count="12" />
      <LineId Id="6419" Count="0" />
      <LineId Id="6147" Count="9" />
      <LineId Id="2538" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>