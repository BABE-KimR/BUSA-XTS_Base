<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="MAIN_1" Id="{73dc1e02-17a5-4069-97f5-b09c1c5e592a}" SpecialFunc="None">
    <Declaration><![CDATA[ PROGRAM MAIN_1
VAR
	

	// helper, state, index variables
	nI						: UINT;
	nN						: UINT;
	nMainState				: UINT;
	
	aStationTimer			: ARRAY [0..GVL.cNUM_STATIONS] OF TON;
	nNextStation				: USINT := 2;
	
	bInitialMovement		: BOOL;
	
	fLowVelocity				: LREAL := 200; // mm/s
	fMediumVelocity			: LREAL := 800;	// mm/s
	fHighVelocity			: LREAL := 2000; // mm/s
	
	// linked NC handles
	stGroupRef				: AXES_GROUP_REF;
	aMover					: ARRAY [0..GVL.cNUM_MOVERS-1] OF FB_Mover;
	
	fbMoverList				: FB_MoverList;
	
	stParameterSet			: ST_MoverParameters_typ;
	
	// Objectives & Parameters
	
	// Todo initialize this in the code with the prop Setter, not by addressing an internal variable
	
	fbQ1			: FB_Zone;
	fbQ2			: FB_Zone;
	fbQ3			: FB_Zone;
	fbQ4			: FB_Zone;
	
	aStation					: ARRAY [0..GVL.cNUM_STATIONS-1] OF FB_Station;		
	aPositionTrigger			: ARRAY [0..1] OF FB_PositionTrigger;		
	aSpeedTrigger			: ARRAY [0..0] OF FB_SpeedTrigger;
	
	
	
	// User commands									
	bCommandEnable			: BOOL;	
		
	bAllMoversEnabled: BOOL;
	bTrig1: BOOL;
	bTrig2: BOOL;
	nGoalVelocity: INT;
	bStorage: BOOL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[CASE nMainState OF
	0:	// -------------------------------------------- Idle state
	
		IF bCommandEnable THEN
			nMainState		:= 10;
		END_IF
		
	10: // -------------------------------------------- Init Stations, Position Triggers
	
		aStation[0].fTrackPosition			:= 1;
		aStation[1].fTrackPosition			:= 1500;
		
		aPositionTrigger[0].fTrackPosition	:= 500;
		aPositionTrigger[1].fTrackPosition	:= 1000;
		aPositionTrigger[0].eTriggerDirection:=mcDirectionPositive;
		aPositionTrigger[1].eTriggerDirection:=mcDirectionPositive;
		
		nMainState		:= 20;
		
	20: // -------------------------------------------- Test enable state
		
		bAllMoversEnabled		:= TRUE; // default ...
		
		FOR nI := 0 TO GVL.cNUM_MOVERS - 1 DO
			aMover[nI].bEnable		:= TRUE;
			
			IF aMover[nI].bReady = FALSE THEN
				bAllMoversEnabled	:= FALSE;
			END_IF
		END_FOR
		
		IF bAllMoversEnabled THEN
			nMainState		:= 30;
		END_IF			
	
	
	30:	// -------------------------------------------- Set all motion parameters
	
		FOR nI := 0 TO GVL.cNUM_MOVERS-1 DO
			stParameterSet.fAcceleration			:= 1E4;		// mm/s2
			stParameterSet.fDeceleration			:= 1E4;		// mm/s2
			stParameterSet.eDirection				:= mcDirectionPositive;
			stParameterSet.fVelocity				:= 1E3;		// mm/s

			aMover[nI].stMotionParameters			:= stParameterSet;
		END_FOR
		
		//bInitialMovement	:= TRUE;
		nMainState			:= 40;
	
	40:	// -------------------------------------------- Ready for commands
	
		// Move all shuttles to specified stations
		IF bInitialMovement THEN
			FOR nI := 0 TO GVL.cNUM_MOVERS-1 DO
				aMover[nI].MoveToStation(aStation[0]);
			END_FOR
			bInitialMovement	:= FALSE;
		END_IF
		
		// ============================================ Example traffic logic below
		
		
		// Station 0 Logic
		IF aStation[0].bMoverInPosition THEN
			aStationTimer[0]( IN := TRUE, PT := T#250MS );
			
			IF aStationTimer[0].Q THEN
				aStation[0].CurrentMover.SetAcceleration(( nGoalVelocity-aStation[0].CurrentMover.fbAxisReference.NcToPlc.ActVelo)/((2*(aPositionTrigger[0].fTrackPosition - aStation[0].fTrackPosition))/(aStation[0].CurrentMover.fbAxisReference.NcToPlc.ActVelo+nGoalVelocity)));
				aPositionTrigger[0].RegisterMover( aStation[0].CurrentMover );
				aStation[0].CurrentMover.MoveToStation( aStation[1] );
			END_IF
		ELSE
			aStationTimer[0]( IN := FALSE );
		END_IF
		
		
		//Trigger 0 Logic
		IF aPositionTrigger[0].bMoverPassedPosition THEN
			aPositionTrigger[0].CurrentMover.SetVelocity(nGoalVelocity);
			aPositionTrigger[1].RegisterMover( aPositionTrigger[0].CurrentMover );
			aPositionTrigger[0].UnregisterCurrent();
		END_IF

		//Trigger 1 logic
		IF aPositionTrigger[1].bMoverPassedPosition THEN
			aPositionTrigger[1].CurrentMover.Setvelocity(4000);			
			bStorage :=UDINT_TO_BOOL(aPositionTrigger[1].CurrentMover.fbAxisReference.NcToPlc.AxisId MOD 2);
			IF bStorage THEN
				aStation[0].UnregisterMover(aPositionTrigger[1].CurrentMover);
				aPositionTrigger[1].CurrentMover.MoveToStation(aStation[1]);
			END_IF
		END_IF	
	
		//Station 1 logic
		IF aStation[1].bMoverInPosition THEN
			aStation[1].CurrentMover.MoveToStation( aStation[0] );
		END_IF
		
	50: // -------------------------------------------- Disabling
	
		FOR nI := 0 TO GVL.cNUM_MOVERS-1 DO
			aMover[nI].bEnable		:= FALSE;
		END_FOR 
		nMainState				:= 0;		
		
END_CASE;



// Call all mover function blocks cyclically
FOR nI := 0 TO GVL.cNUM_MOVERS-1 DO
	aMover[nI]( stGroupReference := stGroupRef );
END_FOR;

// Call all station function blocks cyclically
FOR nI := 0 TO GVL.cNUM_STATIONS-1 DO
	aStation[nI].Cyclic();
END_FOR

aPositionTrigger[0].Cyclic();
aPositionTrigger[1].Cyclic();
]]></ST>
    </Implementation>
    <LineIds Name="MAIN_1">
      <LineId Id="3" Count="121" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>